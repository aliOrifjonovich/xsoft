This is an application that I need to be analysed. The code is Next.js based pure Frontend application.I use TailwindCSS for styling and ready-to-use components which is Shadcn.ui. Shadcn.ui loads its components into the `ui` folder and uses them in other components. I didn't list them one by one; I only included the main UI components that I added myself. 
The Name of the applicaiton is Car Managment Replica Master (Replica since this is a replica of the original files or application).
As far as I now this is an applicaiton for people who has a rental busines with cars to manage theire business. There are a lot of other things should be done further and I need to know where they are for now so that I will be able to help later on or help to comntinue the structure or to better architecture their codebase. 
Some files I am not mentioning them here, because they are mundane and repetitive default django files. I believe you are familiar with all.

These are the steps of how can you help me with:
    1. I need to know what it can and cannot do? What is possible ways of creatinglogic for this aplication.
    2. The are some configuration files are missing. I would need clear instructions to re-create the result of this applicaiton. So you will be helping me to rewrite them and to document how to rewrite in case there is need for someone else to recreate this as well.
    3. File format I will provide to you in this format. path/to/location/file.
    4. xsoftware is my project name
 ------------------------------------------
    This is my project files: xsoftware/app/page.tsx
-------------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import Header from "@/components/header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";

export default function Home() {
  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
          <div className="grid auto-rows-min gap-4 md:grid-cols-3">
            <div className="bg-muted/50 aspect-video rounded-xl" />
            <div className="bg-muted/50 aspect-video rounded-xl" />
            <div className="bg-muted/50 aspect-video rounded-xl" />
          </div>
          <div className="bg-muted/50 min-h-[100vh] flex-1 rounded-xl md:min-h-min" />
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}

-----------------------------------------
This is my project file of layout.tsx: xsoftware/app/layout.tsx
-----------------------------------------

import { NextIntlClientProvider } from "next-intl";
import type { Metadata } from "next";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { getLocale, getMessages } from "next-intl/server";
import NextTopLoader from "nextjs-toploader";
import { UserInterface, UserProvider } from "@/providers/UserProvider";
import { Toaster } from "sonner";
import { cookies } from "next/headers";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};
async function fetchUserData() {
  const cookieStore = cookies();
  const token = (await cookieStore).get("token")?.value;

  if (token) {
    const response = await fetch(
      "https://carmanagement-1-rmyc.onrender.com/api/v1/request-user-data/",
      {
        method: "GET",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        cache: "no-store",
      }
    );
    if (!response.ok) {
      console.error(
        "Failed to fetch user data:",
        response.status,
        response.statusText
      );
      return null;
    }
  
    return response.json();
  }
}

export default async function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const locale = await getLocale();
  const messages = await getMessages();
  const data = await fetchUserData();

  return (
    <html lang={locale} suppressHydrationWarning>
      <body
        className={`${geistSans.variable} ${geistMono.variable} antialiased`}
        suppressHydrationWarning
      >
        <NextIntlClientProvider messages={messages}>
          <UserProvider value={data?.result as UserInterface}>
            <NextTopLoader
              color="oklch(.551 .027 264.364)"
              showSpinner={false}
            />
            {children}
            <Toaster />
          </UserProvider>
        </NextIntlClientProvider>
      </body>
    </html>
  );
}

----------------------------------------
This is project file of branch page: xsoftware/app/branch/page.tsx
----------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import Branches from "@/components/Branches/Branches";
import Header from "@/components/header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { cookies } from "next/headers";

async function getData() {
  const cookieStore = cookies();
  const token = (await cookieStore).get("token")?.value;

  const response = await fetch(
    "https://carmanagement-1-rmyc.onrender.com/api/v1/branchs?page=1&limit=50",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      cache: "no-store",
    }
  );

  if (!response.ok) {
    console.error(
      "Failed to fetch user data:",
      response.status,
      response.statusText
    );
    return [];
  }

  return response.json();
}

export default async function Branch() {
  const branchsData = await getData();

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <Branches data={branchsData?.results} />
      </SidebarInset>
    </SidebarProvider>
  );
}

-------------------------------------------------------------------
This is project file of branch page: xsoftware/app/branch/columns.tsx
-------------------------------------------------------------------
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { Loader2, MoreHorizontal, Pencil, Trash2 } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { useState } from "react";
import { ResponsiveModal } from "@/components/ResponsiveModal";
import Link from "next/link";
import Cookies from "js-cookie";
import { useRouter } from "next/navigation";
import { mutate } from "swr";
import { toast } from "sonner";
import { BASE_URL } from "@/components/data-table";

export type BranchesType = {
  id: number;
  name: string;
  address: string;
  year_of_construction: Date;
  total_area: number;
  google_map_link: string;
  yandex_map_link: string;
};

export const columns: ColumnDef<BranchesType>[] = [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "name",
    header: "Branch Nomi",
    cell: ({ row }) => <div className="font-medium">{row.original.name}</div>,
  },
  {
    accessorKey: "address",
    header: "Address",
    cell: ({ row }) => (
      <div className="text-muted-foreground">{row.original.address}</div>
    ),
  },
  {
    accessorKey: "year_of_construction",
    header: "Year of Construction",
    cell: ({ row }) => (
      <div className="text-muted-foreground">
        {row.original.year_of_construction.toString()}
      </div>
    ),
  },

  {
    accessorKey: "total_area",
    header: "Total Area",
    cell: ({ row }) => (
      <div className="text-muted-foreground">{row.original.total_area}</div>
    ),
  },
  {
    accessorKey: "google_map_link",
    header: "Google Map Link",
    cell: ({ row }) => (
      <div className="text-muted-foreground">
        {row.original.google_map_link}
      </div>
    ),
  },
  {
    accessorKey: "yandex_map_link",
    header: "Yandex Map Link",
    cell: ({ row }) => (
      <div className="text-muted-foreground">
        {row.original.yandex_map_link}
      </div>
    ),
  },
  {
    id: "actions",
    accessorKey: "Actions",
    cell: ({ row }) => {
      const branch = row.original;
      const [open, setOpen] = useState(false);
      const [loading, setLoading] = useState(false);

      const handleDelete = async (id: number) => {
        setLoading(true);
        const token = Cookies.get("token");

        try {
          const response = await fetch(
            `https://carmanagement-1-rmyc.onrender.com/api/v1/branchs/${id}/`,
            {
              method: "DELETE",
              headers: {
                Authorization: `Bearer ${token}`,
              },
            }
          );

          if (response.ok) {
            await mutate(`${BASE_URL}branchs?page=1&limit=50`, undefined, {
              revalidate: true,
            });
          } else {
            console.error("Failed to delete branch");
          }
        } catch (error) {
          console.error("Error deleting branch:", error);
        } finally {
          setLoading(false);
          setOpen(false);
          toast.success("Branch deleted successfully", {
            position: "top-right",
            closeButton: true,
            style: {
              backgroundColor: "green",
              color: "white",
            },
          });
        }
      };

      return (
        <>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <Link href={`/branch/create-branch?id=${branch.id}`}>
                <DropdownMenuItem className="flex items-center gap-2">
                  <Pencil className="h-4 w-4" /> Update
                </DropdownMenuItem>
              </Link>

              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => {
                  setOpen(true);
                }}
                className="flex items-center gap-2 text-red-500"
              >
                {loading ? (
                  <Loader2 className="animate-spin h-4 w-4" />
                ) : (
                  <span className="flex items-center gap-2">
                    <Trash2 className="h-4 w-4" />
                    Delete
                  </span>
                )}
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          <ResponsiveModal
            open={open}
            setOpen={setOpen}
            loading={loading}
            title={`${branch.name} fillialini o'chirmoqchimisiz??`}
            description="Shu branchni o‘chirishni tasdiqlaysizmi?"
            onConfirm={() => handleDelete(branch.id)}
          />
        </>
      );
    },
  },
];


-------------------------------------------------------------------
This is project file of create-branch page: xsoftware/app/branch/create-branch/page.tsx
-------------------------------------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import CreateBranch from "@/components/Branches/CreateBranch";
import Header from "@/components/header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { cookies } from "next/headers";

async function getById(id: number) {
  const cookie = await cookies();
  const token = cookie.get("token");
  const response = await fetch(
    `https://carmanagement-1-rmyc.onrender.com/api/v1/branchs/${id}/`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token?.value}`,
      },
    }
  );

  if (!response.ok) {
    console.error("Network response was not ok for create branch");
  }
  const data = await response.json();
  return data;
}

export default async function Branches({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
}) {
  const id = Number(await searchParams.then((params) => params.id)) || 0;

  const data = id ? await getById(id) : null;

  console.log("data for branchs", data);
  console.log("id", id);

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <CreateBranch updatedValues={data} isUpdated={!!id} id={id} />
      </SidebarInset>
    </SidebarProvider>
  );
}


-------------------------------------------------------------------
This is project file of cars page: xsoftware/app/cars/page.tsx
-------------------------------------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import CarsGroup from "@/components/Cars/CarsGroup";
import Header from "@/components/header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { cookies } from "next/headers";

export type Vehicle = {
  id: number;
  brand: string;
  model: string;
  license_plate: string;
  seating_capacity: number;
  transmission: string;
  branch: {
    id: number;
    name: string;
  };
  rental_status: string;
  category: string;
  minimum_age: number;
  images: {
    car_id: number;
    id: number;
    photo: string;
  }[];
  year: number;
  color: string;
  fuel_type: string;
  engine_size: string;
  mileage: number;
  deposit: number;
  rental_price_per_day: number;
  owner_name: string;
  owner_phone: string;
  description: string;
  features: {
    name: string;
    icon: string;
    id: number;
  }[];
};

async function getData(): Promise<{ results: Vehicle[] }> {
  const cookieStore = cookies();
  const token = (await cookieStore).get("token")?.value;

  const response = await fetch(
    "https://carmanagement-1-rmyc.onrender.com/api/v1/cars?page=1&limit=50",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      cache: "no-store",
    }
  );

  if (!response.ok) {
    console.error(
      "Failed to fetch user data:",
      response.status,
      response.statusText
    );
    return { results: [] };
  }

  return response.json();
}

export default async function Page() {
  const { results: cars } = await getData();

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <CarsGroup data={cars as Vehicle[]} />
      </SidebarInset>
    </SidebarProvider>
  );
}

-------------------------------------------------------------------------
This is project file of create-cars page: xsoftware/app/cars/create-car/page.tsx
-------------------------------------------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import CreateCar from "@/components/Cars/CreateCar";
import Header from "@/components/header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { ICategory } from "@/interfaces/Categories";
import { cookies } from "next/headers";
import { it } from "node:test";
import { FC } from "react";
export interface IBranches {
  id: number;
  name: string;
  address: string;
  year_of_construction: string;
  total_area: number;
  google_map_link: string;
  yandex_map_link: string;
  latitude: string;
  longitude: string;
}
export interface IFeatures {
  id: number;
  name: string;
  icon: string;
}

async function getBranchs() {
  const cookie = await cookies();
  const token = cookie.get("token");
  const response = await fetch(
    "https://carmanagement-1-rmyc.onrender.com/api/v1/branchs?page=1&limit=100",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token?.value}`,
      },
    }
  );

  if (!response.ok) {
    console.error("Network response was not ok for branchs in create branch");
  }

  const { results: data } = await response.json();
  return data;
}
async function getFeatures() {
  const cookie = await cookies();
  const token = cookie.get("token");
  const response = await fetch(
    "https://carmanagement-1-rmyc.onrender.com/api/v1/car-features?page=1&limit=100",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token?.value}`,
      },
    }
  );

  if (!response.ok) {
    console.error("Network response was not ok for features in create branch");
  }

  const { results: data } = await response.json();
  return data;
}
async function getCategories() {
  const cookie = await cookies();
  const token = cookie.get("token");
  const response = await fetch(
    "http://carmanagement-1-rmyc.onrender.com/api/v1/car-catergories/",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token?.value}`,
      },
    }
  );

  if (!response.ok) {
    console.error(
      "Network response was not ok for features in create category"
    );
  }

  const data = await response.json();
  const categoryData = data.map((item: ICategory) => item.category);
  return categoryData;
}

async function getById(id: number) {
  const cookie = await cookies();
  const token = cookie.get("token");
  const response = await fetch(
    `https://carmanagement-1-rmyc.onrender.com/api/v1/cars/${id}/`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token?.value}`,
      },
    }
  );

  if (!response.ok) {
    console.error("Network response was not ok for create car");
  }
  const data = await response.json();
  return data;
}

export default async function CreateCars({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
}) {
  const id = Number(await searchParams.then((params) => params.id)) || 0;
  const getIdData = id ? await getById(id) : null;
  const branchData = await getBranchs();
  const featureData = await getFeatures();
  const categories = await getCategories();

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <CreateCar
          features={featureData}
          branchs={branchData}
          categories={categories}
          updatedValues={getIdData}
          isUpdated={!!id}
          id={id}
        />
      </SidebarInset>
    </SidebarProvider>
  );
}

-------------------------------------------------------------------------
This is project file of category page: xsoftware/app/category/page.tsx
-------------------------------------------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import Categories from "@/components/Categories/Categories";
import Header from "@/components/header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { ICategory } from "@/interfaces/Categories";
import { cookies } from "next/headers";

async function getCategories() {
  const cookieStore = cookies();
  const token = (await cookieStore).get("token")?.value;

  const response = await fetch(
    "https://carmanagement-1-rmyc.onrender.com/api/v1/car-catergories/",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      cache: "no-store",
    }
  );

  if (!response.ok) {
    console.error(
      "Failed to fetch user data:",
      response.status,
      response.statusText
    );
    return [];
  }

  const data = await response.json();
  const categoryData = data.map((item: ICategory) => item.category);
  return categoryData;
}

export default async function Category() {
  const categoriesdata = await getCategories();

  console.log(categoriesdata, "categoriesdata");

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <Categories
          initialData={categoriesdata}
          url="https://carmanagement-1-rmyc.onrender.com/api/v1/car-catergories/"
        />
      </SidebarInset>
    </SidebarProvider>
  );
}

-------------------------------------------------------------------------
This is project file of clients page: xsoftware/app/clients/page.tsx
-------------------------------------------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import Client from "@/components/Client/Client";
import Header from "@/components/header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { ClientType } from "./columns";
import { cookies } from "next/headers";

async function getData(): Promise<ClientType[]> {
  const cookieStore = cookies();
  const token = (await cookieStore).get("token")?.value;

  const response = await fetch(
    "https://carmanagement-1-rmyc.onrender.com/api/v1/client/",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      cache: "no-store",
    }
  );

  if (!response.ok) {
    console.error(
      "Failed to fetch user data:",
      response.status,
      response.statusText
    );
    return [];
  }

  return response.json();
}

export default async function Clients() {
  const data = await getData();

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <Client data={data} />
      </SidebarInset>
    </SidebarProvider>
  );
}

-------------------------------------------------------------------------
This is project file of columns: xsoftware/app/clients/columns.tsx
-------------------------------------------------------------------------
"use client";
import { ColumnDef } from "@tanstack/react-table";
import { MoreHorizontal, Pencil, Trash2, CheckCircle, Ban } from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { cn } from "@/lib/utils";
import { JSX, useState } from "react";
import { ResponsiveModal } from "@/components/ResponsiveModal";
import Link from "next/link";
import { mutate } from "swr";
import Cookies from "js-cookie";
import { BASE_URL } from "@/components/data-table";

export type ClientType = {
  id: number;
  fullname: string;
  email: string;
  phone_number: string;
  address: string;
  age: number;
  passportid: string;
  driverLicense: string;
  licenseExpiry: Date;
  status: "Active" | "Blacklisted" | "InActive";
};

// Status Styles Mapping
const statusStyles: Record<
  ClientType["status"],
  { bg: string; icon: JSX.Element }
> = {
  Active: {
    bg: "bg-green-500 text-white",
    icon: <CheckCircle className="w-4 h-4" />,
  },
  Blacklisted: {
    bg: "bg-red-500 text-white",
    icon: <Ban className="w-4 h-4" />,
  },
  InActive: {
    bg: "bg-gray-400 text-white",
    icon: <Ban className="w-4 h-4" />,
  },
};

export const columns: ColumnDef<ClientType>[] = [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "fullname",
    header: "Full Name",
    cell: ({ row }) => (
      <div className="font-medium">{row.original.fullname}</div>
    ),
  },
  {
    accessorKey: "email",
    header: "Email",
    cell: ({ row }) => (
      <div className="text-muted-foreground">{row.original.email}</div>
    ),
  },
  {
    accessorKey: "phone_number",
    header: "Phone",
    cell: ({ row }) => (
      <div className="text-black">{row.original.phone_number}</div>
    ),
  },

  {
    accessorKey: "address",
    header: "Address",
  },
  {
    accessorKey: "passportid",
    header: "National ID",
    cell: ({ row }) => (
      <div className="text-black">{row.original.passportid}</div>
    ),
  },
  {
    accessorKey: "driverLicense",
    header: "Driver License",
  },
  {
    accessorKey: "licenseExpiry",
    header: "License Expiry",
    cell: ({ row }) => (
      <div className="text-black">{row.original.licenseExpiry.toString()}</div>
    ),
  },
  {
    accessorKey: "status",
    header: "Status",
    cell: ({ row }) => {
      const status = row.original.status;
      return (
        <span
          className={cn(
            "w-max px-3 py-1 rounded-sm text-xs font-bold uppercase flex items-center gap-2",
            statusStyles[status]?.bg
          )}
        >
          {statusStyles[status]?.icon}
          {status}
        </span>
      );
    },
  },
  {
    id: "actions",
    accessorKey: "Actions",
    cell: ({ row }) => {
      const client = row.original;
      const [open, setOpen] = useState(false);
      const [loading, setLoading] = useState(false);

      const handleDelete = async (id: number) => {
        setLoading(true);
        const token = Cookies.get("token");

        const response = await fetch(
          `https://carmanagement-1-rmyc.onrender.com/api/v1/client/${id}/`,
          {
            method: "DELETE",
            headers: {
              Authorization: `Bearer ${token}`,
            },
          }
        );

        if (response.ok) {
          await mutate(`${BASE_URL}client/`, undefined, {
            revalidate: true,
          });
        } else {
          console.error("Failed to delete category");
        }
        setLoading(false);
        setOpen(false);
        // window.location.reload();
      };

      return (
        <>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <Link href={`/clients/create-clients?id=${client.id}`}>
                <DropdownMenuItem className="cursor-pointer">
                  <Pencil className="h-4 w-4 mr-2" />
                  Edit
                </DropdownMenuItem>
              </Link>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => {
                  setOpen(true);
                }}
                className="flex items-center gap-2 text-red-500"
              >
                <Trash2 className="h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          <ResponsiveModal
            open={open}
            setOpen={setOpen}
            loading={loading}
            title={`${client.fullname} fillialini o'chirmoqchimisiz??`}
            description="Shu branchni o‘chirishni tasdiqlaysizmi?"
            onConfirm={() => handleDelete(client.id)}
          />
        </>
      );
    },
  },
];

----------------------------------------------------------------------------------
This is project file of create-clients page: xsoftware/app/create-clients/page.tsx
----------------------------------------------------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import CreateClient from "@/components/Client/CreateClients";
import Header from "@/components/header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { cookies } from "next/headers";

async function getDataById(id: number) {
  const cookie = await cookies();
  const token = cookie.get("token");
  const response = await fetch(
    `https://carmanagement-1-rmyc.onrender.com/api/v1/client/${id}/`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token?.value}`,
      },
    }
  );

  if (!response.ok) {
    console.error("Network response was not ok for create clients");
  }
  const data = await response.json();
  return data;
}

export default async function Clients({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
}) {
  const id = Number(await searchParams.then((params) => params.id)) || 0;
  const data = id ? await getDataById(id) : null;

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <CreateClient
          updatedValues={data}
          isUpdated={id ? true : false}
          id={id}
        />
      </SidebarInset>
    </SidebarProvider>
  );
}

----------------------------------------------------------------------------------
This is project file of login page: xsoftware/app/login/page.tsx
----------------------------------------------------------------------------------
import { GalleryVerticalEnd } from "lucide-react";
import bgimage from "../../assets/bgimage.png";
import { LoginForm } from "@/components/login-form";
import Image from "next/image";
import Link from "next/link";

export default async function LoginPage() {
  return (
    <div className="grid min-h-svh lg:grid-cols-2">
      <div className="flex flex-col gap-4 p-6 md:p-10">
        <div className="flex justify-center gap-2 md:justify-start">
          <Link href="/" className="flex items-center gap-2 font-medium">
            <div className="bg-primary text-primary-foreground flex size-6 items-center justify-center rounded-md">
              <GalleryVerticalEnd className="size-4" />
            </div>
            XSoft Inc.
          </Link>
        </div>
        <div className="flex flex-1 items-center justify-center">
          <div className="w-full max-w-xs">
            <LoginForm />
          </div>
        </div>
      </div>
      <div className="bg-muted relative hidden lg:block ">
        <Image
          src={bgimage}
          alt="system login car renting"
          className="absolute inset-0 h-full w-full object-contain p-4"
        />
      </div>
    </div>
  );
}

----------------------------------------------------------------------------------
This is project file of reservations page: xsoftware/app/reservations/page.tsx
----------------------------------------------------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import Header from "@/components/header";
import Reservation from "@/components/Reservation/Reservation";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { Rental } from "./columns";

//fake getting methods with fake data
async function getData(): Promise<Rental[]> {
  return [
    {
      id: "rental-001",
      pickup: {
        date: "2025-06-12",
        time: "08:00 AM",
        branch: "Yunusobod branch",
      },
      return: {
        date: "2025-06-15",
        time: "05:00 PM",
        branch: "Chilonzor branch",
      },
      carNumber: "01A123BC",
      carType: {
        type: "Premium",
        carname: "Mercedes Benz S-Class",
      },
      client: {
        name: "Alice Smith",
        email: "alice@gmail.com",
        phone: "+998 90 123 45 67",
      },
      totalPrice: 250,
      status: "Confirmed",
    },
    {
      id: "rental-002",
      pickup: {
        date: "2025-06-14",
        time: "09:00 AM",
        branch: "Chilonzor branch",
      },
      return: {
        date: "2025-06-18",
        time: "03:00 PM",
        branch: "Sergeli branch",
      },
      carNumber: "10B456XY",
      carType: {
        type: "Standard",
        carname: "Nexia 3",
      },
      client: {
        name: "Alice Smith",
        email: "alice@gmail.com",
        phone: "+998 90 123 45 67",
      },
      totalPrice: 500,
      status: "Pending",
    },
    {
      id: "rental-003",
      pickup: {
        date: "2025-06-16",
        time: "07:00 AM",
        branch: "Yunusobod branch",
      },
      return: {
        date: "2025-06-20",
        time: "06:00 PM",
        branch: "Olmazor branch",
      },
      carNumber: "20C789ZA",
      carType: {
        type: "CrossOver",
        carname: "BWM X5",
      },
      client: {
        name: "Alice Smith",
        email: "alice@gmail.com",
        phone: "+998 90 123 45 67",
      },
      totalPrice: 320,
      status: "Collected",
    },
    {
      id: "rental-004",
      pickup: {
        date: "2025-06-18",
        time: "10:00 AM",
        branch: "Chilonzor branch",
      },
      return: {
        date: "2025-06-22",
        time: "04:00 PM",
        branch: "Yunusobod branch",
      },
      carNumber: "50D654RT",
      carType: {
        type: "Sport Car",
        carname: "Camaro SS",
      },
      client: {
        name: "Alice Smith",
        email: "alice@gmail.com",
        phone: "+998 90 123 45 67",
      },
      totalPrice: 700,
      status: "Completed",
    },
    {
      id: "rental-005",
      pickup: {
        date: "2025-06-20",
        time: "11:00 AM",
        branch: "Sergeli branch",
      },
      return: {
        date: "2025-06-24",
        time: "02:00 PM",
        branch: "Olmazor branch",
      },
      carNumber: "90E321MN",
      carType: {
        type: "Pickup",
        carname: "Toyota Camry",
      },
      client: {
        name: "Alice Smith",
        email: "alice@gmail.com",
        phone: "+998 90 123 45 67",
      },
      totalPrice: 450,
      status: "No Show",
    },
    {
      id: "rental-006",
      pickup: {
        date: "2025-06-20",
        time: "11:00 AM",
        branch: "Sergeli branch",
      },
      return: {
        date: "2025-06-24",
        time: "02:00 PM",
        branch: "Olmazor branch",
      },
      carNumber: "90E321MN",
      carType: {
        type: "Minivan",
        carname: "Kia Carnival",
      },
      client: {
        name: "Alice Smith",
        email: "alice@gmail.com",
        phone: "+998 90 123 45 67",
      },
      totalPrice: 450,
      status: "No Show",
    },
  ];
}

export default async function Reservations() {
  const data = await getData();
  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <Reservation data={data} />
      </SidebarInset>
    </SidebarProvider>
  );
}

----------------------------------------------------------------------------------
This is project file of columns : xsoftware/app/reservations/columns.tsx
----------------------------------------------------------------------------------
"use client";
import { ColumnDef } from "@tanstack/react-table";
import {
  MoreHorizontal,
  Pencil,
  Trash2,
  CheckCircle,
  Clock,
  Ban,
  Loader,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { Checkbox } from "@/components/ui/checkbox";
import { cn } from "@/lib/utils";
import { JSX } from "react";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

export type Rental = {
  id: string;
  pickup: { date: string; time: string; branch: string };
  return: { date: string; time: string; branch: string };
  carNumber: string;
  carType: {
    type: string;
    carname: string;
  };
  client: {
    name: string;
    email: string;
    phone: string;
  };
  totalPrice: number;
  status: "Collected" | "Confirmed" | "Completed" | "Pending" | "No Show";
};

// Status Icons & Colors Mapping
const statusStyles: Record<
  Rental["status"],
  { bg: string; icon: JSX.Element }
> = {
  Confirmed: {
    bg: "bg-green-500 text-white",
    icon: <CheckCircle className="w-4 h-4" />,
  },
  Pending: {
    bg: "bg-yellow-500 text-white",
    icon: <Clock className="w-4 h-4" />,
  },
  Completed: {
    bg: "bg-black text-white",
    icon: <CheckCircle className="w-4 h-4" />,
  },
  Collected: {
    bg: "bg-blue-400 text-white",
    icon: <Loader className="w-4 h-4 animate-spin" />,
  },
  "No Show": { bg: "bg-red-500 text-white", icon: <Ban className="w-4 h-4" /> },
};

export const columns: ColumnDef<Rental>[] = [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  {
    accessorKey: "pickup",
    header: "Pickup",
    cell: ({ row }) => (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <div className="flex flex-col cursor-pointer">
              <div className="font-medium">
                {new Date(row.original.pickup.date).toLocaleDateString("en-GB")}{" "}
                ...
              </div>
              <div className="text-muted-foreground text-sm">
                {row.original.pickup.branch}
              </div>
            </div>
          </TooltipTrigger>
          <TooltipContent
            side="bottom"
            align="center"
            className="p-2 text-sm bg-white text-black shadow-md rounded-md border"
          >
            <div className="font-semibold">Pickup Details</div>
            <div>Date: {row.original.pickup.date}</div>
            <div>Time: {row.original.pickup.time}</div>
            <div>Branch: {row.original.pickup.branch}</div>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    ),
  },
  {
    accessorKey: "return",
    header: "Return",
    cell: ({ row }) => (
      <TooltipProvider>
        <Tooltip>
          <TooltipTrigger asChild>
            <div className="flex flex-col cursor-pointer">
              <div className="font-medium">
                {new Date(row.original.return.date).toLocaleDateString("en-GB")}{" "}
                ...
              </div>
              <div className="text-muted-foreground text-sm">
                {row.original.return.branch}
              </div>
            </div>
          </TooltipTrigger>
          <TooltipContent
            side="bottom"
            align="center"
            className="p-2 text-sm bg-white text-black shadow-md rounded-md border"
          >
            <div className="font-semibold">Return Details</div>
            <div>Date: {row.original.return.date}</div>
            <div>Time: {row.original.return.time}</div>
            <div>Branch: {row.original.return.branch}</div>
          </TooltipContent>
        </Tooltip>
      </TooltipProvider>
    ),
  },
  {
    accessorKey: "carNumber",
    header: "Car Number",
  },
  {
    accessorKey: "carType",
    accessorFn: (row) => row.carType.carname,
    header: "Car Type",
    filterFn: (row, columnId, filterValue) => {
      return row.original.carType.carname
        .toLowerCase()
        .includes(filterValue.toLowerCase());
    },
    cell: ({ row }) => {
      const carType = row.original.carType;
      return (
        <div className="flex flex-col">
          <div className="font-medium">{carType.carname}</div>
          <div className="text-muted-foreground text-sm">{carType.type}</div>
        </div>
      );
    },
  },
  {
    accessorKey: "client",
    header: "Client",
    cell: ({ row }) => {
      const client = row.original.client;
      return (
        <div className="flex flex-col">
          <div className="font-medium">{client.name}</div>
          <div className="text-muted-foreground text-sm">{client.email}</div>
          <div className="text-muted-foreground text-sm">{client.phone}</div>
        </div>
      );
    },
  },
  {
    accessorKey: "totalPrice",
    header: () => <div className="text-right">Total Price</div>,
    cell: ({ row }) => {
      const price = parseFloat(row.getValue("totalPrice"));
      const formatted = new Intl.NumberFormat("en-US", {
        style: "currency",
        currency: "USD",
      }).format(price);

      return <div className="text-right font-medium">{formatted}</div>;
    },
  },
  {
    accessorKey: "status",
    header: "Status",
    cell: ({ row }) => {
      const status = row.original.status;
      return (
        <span
          className={cn(
            "w-max px-3 py-1 rounded-sm text-xs font-bold uppercase flex items-center gap-2",
            statusStyles[status].bg
          )}
        >
          {statusStyles[status].icon}
          {status}
        </span>
      );
    },
  },
  {
    id: "actions",
    accessorKey: "Actions",
    cell: ({ row }) => {
      const rental = row.original;

      return (
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <Button variant="ghost" className="h-8 w-8 p-0">
              <span className="sr-only">Open menu</span>
              <MoreHorizontal className="h-4 w-4" />
            </Button>
          </DropdownMenuTrigger>
          <DropdownMenuContent align="end">
            <DropdownMenuLabel>Actions</DropdownMenuLabel>
            <DropdownMenuItem
              onClick={() => console.log("Update:", rental.id)}
              className="flex items-center gap-2"
            >
              <Pencil className="h-4 w-4" /> Update
            </DropdownMenuItem>
            <DropdownMenuSeparator />
            <DropdownMenuItem
              onClick={() => console.log("Delete:", rental.id)}
              className="flex items-center gap-2 text-red-500"
            >
              <Trash2 className="h-4 w-4" /> Delete
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      );
    },
  },
];

----------------------------------------------------------------------------------
This is project file of staffs page : xsoftware/app/staffs/page.tsx
----------------------------------------------------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import Header from "@/components/header";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import Staffs from "@/components/Staffs/User";
import { cookies } from "next/headers";

// : Promise<Staff[]>
async function getData() {
  const cookieStore = cookies();
  const token = (await cookieStore).get("token")?.value;

  const response = await fetch(
    `https://carmanagement-1-rmyc.onrender.com/api/v1/employee?page=1&limit=100`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      cache: "no-store",
    }
  );

  if (!response.ok) {
    console.error(
      "Failed to fetch user data:",
      response.status,
      response.statusText
    );
    return [];
  }

  return response.json();
}

export default async function Page() {
  const staffdata = await getData();

  console.log("staffdata", staffdata);

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <Staffs data={staffdata} />
      </SidebarInset>
    </SidebarProvider>
  );
}
----------------------------------------------------------------------------------
This is project file of columns : xsoftware/app/staffs/columns.tsx
----------------------------------------------------------------------------------
"use client";
import { ColumnDef } from "@tanstack/react-table";
import {
  MoreHorizontal,
  Pencil,
  Trash2,
  CheckCircle,
  Clock,
  Ban,
} from "lucide-react";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { Button } from "@/components/ui/button";
import { cn } from "@/lib/utils";
// import Image from "next/image";
import { JSX, useState } from "react";
import { Checkbox } from "@/components/ui/checkbox";
import { ResponsiveModal } from "@/components/ResponsiveModal";
import { useRouter } from "next/router";
import Link from "next/link";
import { mutate } from "swr";
import { BASE_URL } from "@/components/data-table";
import { toast } from "sonner";
import Cookies from "js-cookie";

export type Staff = {
  id: number;
  photo: string;
  fullname: string;
  dob: Date;
  gender: "Male" | "Female";
  phone_number: string;
  position: string;
  employmentType: "Full_time" | "Part_time" | "Contract";
  hireDate: Date;
  branch: {
    id: number;
    name: string;
  };
  salary: number;
  workStatus: "Active" | "Vacation" | "Fired";
};

const statusStyles: Record<
  Staff["workStatus"],
  { bg: string; icon: JSX.Element }
> = {
  Active: {
    bg: "bg-green-500 text-white",
    icon: <CheckCircle className="w-4 h-4" />,
  },
  Vacation: {
    bg: "bg-yellow-500 text-white",
    icon: <Clock className="w-4 h-4" />,
  },
  Fired: {
    bg: "bg-red-500 text-white",
    icon: <Ban className="w-4 h-4" />,
  },
};

export const columns: ColumnDef<Staff>[] = [
  {
    id: "select",
    header: ({ table }) => (
      <Checkbox
        checked={
          table.getIsAllPageRowsSelected() ||
          (table.getIsSomePageRowsSelected() && "indeterminate")
        }
        onCheckedChange={(value) => table.toggleAllPageRowsSelected(!!value)}
        aria-label="Select all"
      />
    ),
    cell: ({ row }) => (
      <Checkbox
        checked={row.getIsSelected()}
        onCheckedChange={(value) => row.toggleSelected(!!value)}
        aria-label="Select row"
      />
    ),
    enableSorting: false,
    enableHiding: false,
  },
  // {
  //   accessorKey: "photo",
  //   header: "Photo",
  //   cell: ({ row }) => (
  //     <Image
  //       src={row.original.photo}
  //       alt="Staff Photo"
  //       width={40}
  //       height={40}
  //       className="rounded-full object-cover"
  //     />
  //   ),
  // },
  {
    accessorKey: "fullname",
    header: "Full Name",
  },
  {
    accessorKey: "dob",
    header: "Date of Birth",
    cell: ({ row }) => (
      <div className="text-black">{row.original.dob.toString()}</div>
    ),
  },
  {
    accessorKey: "gender",
    header: "Gender",
  },
  {
    accessorKey: "phone_number",
    header: "Phone Number",
    cell: ({ row }) => (
      <div className="text-black">{row.original.phone_number}</div>
    ),
  },
  {
    accessorKey: "position",
    header: "Position",
  },
  {
    accessorKey: "employmentType",
    header: "Ish shakli",
  },
  {
    accessorKey: "hireDate",
    header: "Hire Date",
    cell: ({ row }) => row.original.hireDate.toString(),
  },
  {
    accessorKey: "workLocation",
    header: "Work Location",
    cell: ({ row }) => row.original.branch.name,
  },
  {
    accessorKey: "salary",
    header: "Salary",
    cell: ({ row }) => {
      return <span className="font-medium">{row.original.salary}</span>;
    },
  },
  {
    accessorKey: "workStatus",
    header: "Work Status",
    cell: ({ row }) => {
      const status = row.original.workStatus;
      return (
        <span
          className={cn(
            "w-max px-3 py-1 rounded-sm text-xs font-bold uppercase flex items-center gap-2",
            statusStyles[status].bg
          )}
        >
          {statusStyles[status].icon}
          {status}
        </span>
      );
    },
  },
  {
    id: "actions",
    accessorKey: "Actions",
    cell: ({ row }) => {
      const staff = row.original;
      const [open, setOpen] = useState(false);
      const [loading, setLoading] = useState(false);

      const handleDelete = async (id: number) => {
        setLoading(true);
        const token = Cookies.get("token");

        try {
          const response = await fetch(
            `https://carmanagement-1-rmyc.onrender.com/api/v1/employee/${id}/`,
            {
              method: "DELETE",
              headers: {
                Authorization: `Bearer ${token}`,
              },
            }
          );

          if (response.ok) {
            await mutate(`${BASE_URL}employee/`, undefined, {
              revalidate: true,
            });
          } else {
            console.error("Failed to delete category");
          }
        } catch (error) {
          console.error("Failed to delete category");
        } finally {
          setLoading(false);
          setOpen(false);
          toast.success("Staff deleted successfully", {
            position: "top-right",
            closeButton: true,
            style: {
              backgroundColor: "green",
              color: "white",
            },
          });
        }
      };

      return (
        <>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="ghost" className="h-8 w-8 p-0">
                <span className="sr-only">Open menu</span>
                <MoreHorizontal className="h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent align="end">
              <DropdownMenuLabel>Actions</DropdownMenuLabel>
              <Link href={`/staffs/create-staffs?id=${staff.id}`}>
                <DropdownMenuItem className="flex items-center gap-2 cursor-pointer">
                  <Pencil className="h-4 w-4" /> Update
                </DropdownMenuItem>
              </Link>
              <DropdownMenuSeparator />
              <DropdownMenuItem
                onClick={() => {
                  setOpen(true);
                }}
                className="flex items-center gap-2 text-red-500 cursor-pointer"
              >
                <Trash2 className="h-4 w-4" /> Delete
              </DropdownMenuItem>
            </DropdownMenuContent>
          </DropdownMenu>
          <ResponsiveModal
            open={open}
            setOpen={setOpen}
            loading={loading}
            title={`${staff.fullname} fillialini o'chirmoqchimisiz??`}
            description="Shu branchni o‘chirishni tasdiqlaysizmi?"
            onConfirm={() => handleDelete(staff.id)}
          />
        </>
      );
    },
  },
];

----------------------------------------------------------------------------------
This is project file of create-staffs: xsoftware/app/staffs/create-staffs/page.tsx
----------------------------------------------------------------------------------
import { AppSidebar } from "@/components/app-sidebar";
import Header from "@/components/header";
import CreateStaff from "@/components/Staffs/CreateStaffs";
import { SidebarInset, SidebarProvider } from "@/components/ui/sidebar";
import { cookies } from "next/headers";

async function getBranchs() {
  const cookie = await cookies();
  const token = cookie.get("token");
  const response = await fetch(
    "https://carmanagement-1-rmyc.onrender.com/api/v1/branchs?page=1&limit=100",
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token?.value}`,
      },
    }
  );

  if (!response.ok) {
    console.error("Network response was not ok for branchs in create branch");
  }

  const { results: data } = await response.json();
  return data;
}
async function getById(id: number) {
  const cookie = await cookies();
  const token = cookie.get("token");
  const response = await fetch(
    `https://carmanagement-1-rmyc.onrender.com/api/v1/employee/${id}/`,
    {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token?.value}`,
      },
    }
  );

  if (!response.ok) {
    console.error("Network response was not ok for create branch");
  }
  const data = await response.json();
  return data;
}

export default async function CreateStaffs({
  searchParams,
}: {
  searchParams: Promise<{ [key: string]: string | string[] | undefined }>;
}) {
  const id = Number(await searchParams.then((params) => params.id)) || 0;

  const data = id ? await getById(id) : null;
  const branchs = await getBranchs();

  console.log("data for staffs", data);
  console.log("id", id);

  return (
    <SidebarProvider>
      <AppSidebar />
      <SidebarInset>
        <Header />
        <CreateStaff
          branchs={branchs}
          updatedValues={data}
          isUpdated={id ? true : false}
          id={id}
        />
      </SidebarInset>
    </SidebarProvider>
  );
}
----------------------------------------------------------------------------------
This is project file of branches components: xsoftware/components/Branches/Branches.tsx
----------------------------------------------------------------------------------
import { BranchesType, columns } from "@/app/branch/columns";
import React, { FC } from "react";
import { DataTable } from "../data-table";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "../ui/breadcrumb";
interface BranchesProp {
  data?: BranchesType[];
}
const Branches: FC<BranchesProp> = ({ data }) => {
  console.log("branch", data);

  return (
    <div className="px-4 py-2 flex flex-col gap-4">
      <div className="flex flex-col w-full  gap-4">
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href="/">Home</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage className="font-medium">Filiallar</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>

        {/* <div className="flex w-full gap-4">
          {fakedata?.map((item) => (
            <Card
              key={item.id}
              className="w-1/4 flex flex-col gap-2 items-center justify-center "
            >
              <div className="flex flex-col gap-1">
                <h2 className=" text-gray-500">{item.title}</h2>
                <h1
                  className={item.color + " font-semibold text-3xl text-center"}
                >
                  {item.count} ta
                </h1>
              </div>
            </Card>
          ))}
        </div> */}
      </div>
      <DataTable
        columns={columns}
        data={data || []}
        searchcolumns="name"
        apiURL="branchs?page=1&limit=50"
        url="/branch/create-branch"
        buttonTitle="Yangi Filial qo'shish"
      />
    </div>
  );
};

export default Branches;

----------------------------------------------------------------------------------
This is project file of CreateBranch components: xsoftware/components/Branches/CreateBranch.tsx
----------------------------------------------------------------------------------
"use client";
import { FormInput } from "@/interfaces";
import React, { FC } from "react";
import { z } from "zod";
import CreateForm from "../CreateForm";
import { BranchesType } from "@/app/branch/columns";

interface CreateBranchProps {
  updatedValues: BranchesType;
  isUpdated: boolean;
  id: number;
}

const formSchema = z.object({
  name: z.string().min(1, "Filial nomini kiriting"),
  address: z.string().min(1, "Filial manzilini kiriting"),
  year_of_construction: z.date().min(new Date("1900-01-01"), "Yilni kiriting"),
  total_area: z.number().min(0, "Necha metr kvadratligini kiriting"),
  google_map_link: z.string().url("Invalid Google Maps URL"),
  yandex_map_link: z.string().url("Invalid Yandex Maps URL"),
});

const inputs: FormInput<typeof formSchema>[] = [
  {
    title: "Avtomobil ma'lumotlari",
    fields: [
      {
        type: "single_line",
        inputType: "text",
        label: "Branch Name",
        placeholder: "Oybek filiali",
        name: "name",
      },
      {
        type: "single_line",
        inputType: "text",
        label: "Address",
        placeholder: "Yunusobod, Toshkent",
        name: "address",
      },
      {
        type: "datePicker",
        inputType: "date",
        label: "Year of Construction",
        name: "year_of_construction",
      },
      {
        type: "single_line",
        inputType: "number",
        label: "Total area",
        placeholder: "100",
        name: "total_area",
      },
      {
        type: "single_line",
        inputType: "text",
        label: "Googel map link",
        placeholder: "https://www.google.com/maps",
        name: "google_map_link",
      },
      {
        type: "single_line",
        inputType: "text",
        label: "Yandex map link",
        placeholder: "https://www.yandex.com/maps",
        name: "yandex_map_link",
      },
    ],
  },
];

const CreateBranch: FC<CreateBranchProps> = ({
  updatedValues,
  isUpdated,
  id,
}) => {
  return (
    <CreateForm<typeof formSchema>
      inputs={inputs}
      formSchema={formSchema}
      pageTitle={"Yangi Filial qo'shish"}
      url="branchs/"
      pageUrl="/branch"
      toastMessage={"Filial"}
      updatedValues={updatedValues}
      isUpdated={isUpdated}
      id={id}
    />
  );
};

export default CreateBranch;

----------------------------------------------------------------------------------
This is project file of CreateCarsGroup components: xsoftware/components/Cars/CarsGroup.tsx
----------------------------------------------------------------------------------
"use client";
import React, { FC } from "react";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "../ui/breadcrumb";
import CarsTable from "../carstable";
import { Vehicle } from "@/app/cars/page";
import { Card } from "../ui/card";

interface CarsGroupProps {
  data?: Vehicle[];
}

const fakedata = [
  {
    id: "1",
    title: "Avtomobillar soni",
    count: 10,
    color: "text-primary",
  },
  {
    id: "2",
    title: "Bo'sh avtomobillar",
    count: 2,
    color: "text-green-500",
  },
  {
    id: "3",
    title: "Ijaradagi avtomobillar",
    count: 3,
    color: "text-red-500",
  },
  {
    id: "4",
    title: "Reserv qilinganlar",
    count: 5,
    color: "text-amber-500",
  },
];
const CarsGroup: FC<CarsGroupProps> = ({ data }) => {
  return (
    <div className="px-4 py-2 flex flex-col gap-4">
      <div className="flex flex-col w-full  gap-4">
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href="/">Home</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage className="font-medium">
                Avtomobillar
              </BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>

        <div className="flex w-full gap-4">
          {fakedata?.map((item) => (
            <Card
              key={item.id}
              className="w-1/4 flex flex-col gap-2 items-center justify-center "
            >
              <div className="flex flex-col gap-1">
                <h2 className=" text-gray-500">{item.title}</h2>
                <h1
                  className={item.color + " font-semibold text-3xl text-center"}
                >
                  {item.count} ta
                </h1>
              </div>
            </Card>
          ))}
        </div>
      </div>
      <CarsTable data={data || []} buttonTitle={"Avtomobil qo'shish"} />
    </div>
  );
};

export default CarsGroup;

----------------------------------------------------------------------------------
This is project file of CreateCar components: xsoftware/components/Cars/CreateCar.tsx
----------------------------------------------------------------------------------
"use client";
import { FormInput } from "@/interfaces";
import React, { FC } from "react";
import { z } from "zod";
import CreateForm from "../CreateForm";
import { IBranches, IFeatures } from "@/app/cars/create-car/page";
import { Vehicle } from "@/app/cars/page";
import { ICategory } from "@/interfaces/Categories";

const formSchema = z.object({
  brand: z.string().min(1),
  model: z.string().min(1),
  license_plate: z.string().min(1),
  seating_capacity: z.preprocess((val) => Number(val), z.number().min(1)),
  transmission: z.string().min(1),
  mileage: z.preprocess((val) => Number(val), z.number().min(1)),
  rental_price_per_day: z.preprocess((val) => Number(val), z.number().min(1)),
  owner_name: z.string().min(1),
  owner_phone: z.string().min(1),
  color: z.string().min(1),
  fuel_type: z.string().min(1),
  year: z.preprocess((val) => Number(val), z.number().min(1)),
  deposit: z.preprocess((val) => Number(val), z.number().min(1)),
  minimum_age: z.preprocess((val) => Number(val), z.number().min(1)),
  branchs: z.preprocess((val) => Number(val), z.number().min(1)),
  category: z.preprocess((val) => Number(val), z.number().min(1)),
  features: z.array(z.number().min(1)),
  engine_size: z.enum([
    "0.6L",
    "1.0L",
    "1.5L",
    "2.0L",
    "2.5L",
    "3.0L",
    "3.5L",
    "4.0L",
    "5.0L",
    "6.0L",
    "7.0L+",
  ]),
  rental_status: z.enum(["bosh", "ijarada", "reserved"]),
  description: z.string().min(10),
  images: z
    .any()
    .refine((files) => files.length > 0, "Please upload at least one image"),
});

interface IcreateCar {
  features: IFeatures[];
  branchs: IBranches[];
  updatedValues: z.infer<typeof formSchema>;
  categories: ICategory[];
  isUpdated: boolean;
  id: number;
}

const CreateCar: FC<IcreateCar> = ({
  features,
  branchs,
  categories,
  updatedValues,
  isUpdated,
  id,
}) => {
  const inputs: FormInput<typeof formSchema>[] = [
    {
      title: "Avtomobil ma'lumotlari",
      fields: [
        {
          type: "single_line",
          inputType: "text",
          label: "Brand name",
          placeholder: "Toyota",
          name: "brand",
        },
        {
          type: "single_line",
          inputType: "text",
          label: "Model name",
          placeholder: "Gentra",
          name: "model",
        },
        {
          type: "single_line",
          inputType: "text",
          label: "License plate",
          placeholder: "01A123BB",
          name: "license_plate",
        },
        {
          type: "single_line",
          inputType: "number",
          label: "Seating capacity",
          placeholder: "5",
          name: "seating_capacity",
        },

        {
          type: "single_line",
          inputType: "number",
          label: "Mileage",
          placeholder: "15000",
          name: "mileage",
        },

        {
          type: "select",
          inputType: "text",
          label: "Transmission Type",
          name: "transmission",
          placeholder: "Automatic",
          options: [
            { label: "Automatic", value: "automatic" },
            { label: "Manual", value: "manual" },
          ],
        },
        {
          type: "select",
          label: "Car Color",
          name: "color",
          placeholder: "Red",
          options: [
            { label: "Red", value: "red", color: "#FF0000" },
            { label: "Blue", value: "blue", color: "#0000FF" },
            { label: "Black", value: "black", color: "#000000" },
            { label: "White", value: "white", color: "#FFFFFF" },
            { label: "Silver", value: "silver", color: "#C0C0C0" },
            { label: "Gray", value: "gray", color: "#808080" },
          ],
        },

        {
          type: "select",
          label: "Fuel type",
          placeholder: "Diesel",
          name: "fuel_type",
          options: [
            { label: "Diesel", value: "diesel" },
            { label: "Petrol", value: "petrol" },
            { label: "Electric", value: "electric" },
            { label: "Hybrid", value: "hybrid" },
          ],
        },

        {
          type: "select",
          label: "Engine Size",
          name: "engine_size",
          placeholder: "2.0L",
          options: [
            { label: "0.6L - Small City Car", value: "0.6L" },
            { label: "1.0L - Compact Car", value: "1.0L" },
            { label: "1.5L - Economy Car", value: "1.5L" },
            { label: "2.0L - Midsize Car", value: "2.0L" },
            { label: "2.5L - Large Sedan/SUV", value: "2.5L" },
            { label: "3.0L - Performance SUV", value: "3.0L" },
            { label: "3.5L - Sporty Crossover", value: "3.5L" },
            { label: "4.0L - Performance Car", value: "4.0L" },
            { label: "5.0L - Muscle Car", value: "5.0L" },
            { label: "6.0L - Supercar", value: "6.0L" },
            { label: "7.0L+ - Hypercar", value: "7.0L+" },
          ],
        },
        {
          type: "single_line",
          inputType: "number",
          label: "Car year",
          placeholder: "2022",
          name: "year",
        },
        {
          type: "single_line",
          inputType: "number",
          label: "Minimum age",
          placeholder: "20",
          name: "minimum_age",
        },
        {
          type: "select",
          label: "Filialni tanlang",
          name: "branchs",
          placeholder: "Yunusobod",
          options:
            branchs?.map((item: IBranches) => ({
              id: item?.id,
              label: item?.name,
              value: item.id?.toString(),
            })) || [],
        },
        {
          type: "select",
          label: "Avtomobil Kategoriyasi",
          name: "category",
          placeholder: "Sedan",
          options:
            categories?.map((item: ICategory) => ({
              id: item?.id,
              label: item?.name,
              value: item?.id?.toString(),
            })) || [],
        },
      ],
    },
    {
      type: "multi_select",
      label: "Features",
      placeholder: "features",
      name: "features",
      options:
        features?.map((feature: IFeatures) => ({
          label: feature.name,
          value: feature.id.toString(),
        })) || [],
    },
    {
      type: "select",
      label: "Ijaraviy holati",
      name: "rental_status",
      placeholder: "Bo'sh",
      options: [
        { label: "✅ Bo'sh", value: "bosh" },
        { label: "🚗 Ijarada", value: "ijarada" },
        { label: "📅 Reserv qilingan", value: "reserved" },
      ],
    },
    {
      title: "Ijaraviy narxlari",
      fields: [
        {
          type: "single_line",
          inputType: "number",
          label: "Rental price per day",
          placeholder: "50",
          name: "rental_price_per_day",
        },
        {
          type: "single_line",
          inputType: "number",
          label: "Depozite",
          placeholder: "10000",
          name: "deposit",
        },
      ],
    },

    {
      title: "Avtomobil Egasining ma'lumotlari",
      fields: [
        {
          type: "single_line",
          inputType: "text",
          label: "Owner name",
          placeholder: "Alisher Karimov",
          name: "owner_name",
        },
        {
          type: "single_line",
          inputType: "text",
          label: "Owner phone",
          placeholder: "+998901234567",
          name: "owner_phone",
        },
      ],
    },

    {
      type: "multi_line",
      label: "Description",
      placeholder: "desc",
      name: "description",
    },

    {
      type: "multi_image",
      label: "Car Images",
      name: "images",
    },
  ];

  const formattedUpdatedValues = updatedValues
    ? { ...updatedValues, branch: updatedValues?.branchs?.toString() || "" }
    : ({} as z.infer<typeof formSchema>);

  return (
    <CreateForm<typeof formSchema>
      inputs={inputs}
      formSchema={formSchema}
      pageTitle="Yangi avtomobil qo'shish"
      url="cars/"
      pageUrl="/cars"
      toastMessage="Avtomobil"
      updatedValues={formattedUpdatedValues}
      isUpdated={isUpdated}
      id={id}
    />
  );
};

export default CreateCar;

----------------------------------------------------------------------------------
This is project file of Categories components: xsoftware/components/Categories/Categories.tsx
----------------------------------------------------------------------------------
"use client";
import React, { FC, useState } from "react";
import useSWR from "swr";
import Cookies from "js-cookie";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { ICategory } from "@/interfaces/Categories";
import { Button } from "../ui/button";
import { Car, Pencil, Plus, Trash2, Loader2 } from "lucide-react";
import { Input } from "../ui/input";
import {
  Card,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "../ui/card";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
  DialogTrigger,
} from "../ui/dialog";
import { Label } from "../ui/label";
import { ResponsiveModal } from "../ResponsiveModal";
import {
  Table,
  TableBody,
  TableCaption,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "../ui/table";

// Props Interface
interface ICategoriesProps {
  initialData: ICategory[];
  url: string;
}

// Form Schema Validation
const formSchema = z.object({
  name: z.string().min(2, "Category name must be at least 2 characters"),
});

// Form Type from Zod
type FormValues = z.infer<typeof formSchema>;

// Fetcher function for SWR
const fetcher = async (url: string) => {
  const token = Cookies.get("token");
  const response = await fetch(url, {
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token}`,
    },
  });

  if (!response.ok) throw new Error("Failed to fetch categories");
  return response.json();
};

const Categories: FC<ICategoriesProps> = ({ initialData, url }) => {
  // Refetcher with SWR hook
  const {
    data: categories,
    error,
    mutate,
  } = useSWR(url, fetcher, {
    fallbackData: initialData,
    revalidateOnFocus: false,
  });

  // States
  const [selectedCategory, setSelectedCategory] = useState<ICategory | null>(
    null
  );
  const { data: categoryData, isLoading } = useSWR(
    selectedCategory ? `${url}${selectedCategory.id}/` : null,
    fetcher
  );
  const openCarsModal = (category: ICategory) => {
    setSelectedCategory(category);
  };
  const [isOpen, setIsOpen] = useState<boolean>(false);
  const [isDeleteOpen, setIsDeleteOpen] = useState<boolean>(false);
  const [loading, setLoading] = useState(false);
  const [searchTerm, setSearchTerm] = useState("");

  // Hook Form
  const categoryForm = useForm<FormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: { name: "" },
  });

  // Open modal for add/edit
  const openModal = (category: ICategory | null = null) => {
    setSelectedCategory(category);
    categoryForm.reset(category ? { name: category.name } : { name: "" });
    setIsOpen(true);
  };

  // Open delete modal
  const openDeleteModal = (category: ICategory) => {
    setSelectedCategory(category);
    setIsDeleteOpen(true);
  };

  // Submit add/edit form
  async function onSubmit(data: FormValues) {
    setLoading(true);
    const token = Cookies.get("token");
    const endpoint = selectedCategory ? `${url}${selectedCategory.id}/` : url;

    const response = await fetch(endpoint, {
      method: selectedCategory ? "PUT" : "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
      body: JSON.stringify({ name: data.name }),
    });

    if (response.ok) {
      mutate();
      setIsOpen(false);
    } else {
      console.error("Failed to save category:", await response.text());
    }
    setLoading(false);
  }

  // Delete category
  async function handleDelete() {
    if (!selectedCategory) return;

    setLoading(true);
    const token = Cookies.get("token");

    const response = await fetch(`${url}${selectedCategory.id}/`, {
      method: "DELETE",
      headers: {
        Authorization: `Bearer ${token}`,
      },
    });

    if (response.ok) {
      mutate();
      setIsDeleteOpen(false);
    } else {
      console.error("Failed to delete category:", await response.text());
    }
    setLoading(false);
  }

  // Search by Category
  const filteredCategories = categories?.filter((category: ICategory) =>
    category?.name?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  if (error) return <p className="text-red-500">Failed to load categories</p>;

  return (
    <>
      <div className="px-4 py-2 flex flex-col gap-4">
        <div className="container mx-auto py-5">
          <h1 className="text-2xl font-bold mb-4">Avtomobil kategoriyalar</h1>

          {/* Add Category Button */}
          <div className="flex gap-4 mb-8 w-full items-center justify-between">
            <Input
              placeholder="Izlash..."
              className="w-1/2 md:w-2/3"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
            />
            <Button className="w-1/2 md:w-max" onClick={() => openModal()}>
              <Plus />
              Add Category
            </Button>
          </div>

          {/* Categories List */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-10">
            {filteredCategories?.map((category: ICategory) => (
              <Card key={category.id} className="shadow-md">
                <CardHeader>
                  <CardTitle className="capitalize text-3xl">
                    {category.name}
                  </CardTitle>
                  <CardDescription className="text-md">
                    {categoryData?.cars?.length} ta avtomobillar mavjud
                  </CardDescription>
                </CardHeader>
                <CardFooter className="flex justify-between">
                  {/* View Cars */}
                  <Dialog>
                    <DialogTrigger asChild>
                      <Button
                        variant="outline"
                        onClick={() => openCarsModal(category)}
                      >
                        <Car className="mr-2 h-4 w-4" />
                        View Cars
                      </Button>
                    </DialogTrigger>
                    <DialogContent>
                      <DialogHeader>
                        <DialogTitle className="capitalize">
                          Cars in {category.name}
                        </DialogTitle>
                      </DialogHeader>
                      {isLoading ? (
                        <div className="flex justify-center items-center py-4">
                          <Loader2 className="animate-spin h-6 w-6 text-gray-500" />
                        </div>
                      ) : categoryData?.cars?.length > 0 ? (
                        <Table>
                          <TableCaption>
                            List of cars in {category.name} category
                          </TableCaption>
                          <TableHeader>
                            <TableRow>
                              <TableHead>ID</TableHead>
                              <TableHead>Car Name</TableHead>
                              <TableHead>License Plate</TableHead>
                            </TableRow>
                          </TableHeader>
                          <TableBody>
                            {categoryData.cars.map((car: any) => (
                              <TableRow key={car.id}>
                                <TableCell className="font-medium">
                                  {car.id}
                                </TableCell>
                                <TableCell>
                                  {car.brand} {car.model}
                                </TableCell>
                                <TableCell>{car.license_plate}</TableCell>
                              </TableRow>
                            ))}
                          </TableBody>
                        </Table>
                      ) : (
                        <p className="text-gray-500">
                          No cars found in this category.
                        </p>
                      )}
                    </DialogContent>
                  </Dialog>

                  {/* Buttons of Card */}
                  <div className="flex gap-2">
                    {/* Edit Category */}
                    <Button
                      variant="outline"
                      size="icon"
                      onClick={() => openModal(category)}
                    >
                      <Pencil className="h-4 w-4" />
                    </Button>

                    {/* Delete Category */}
                    <Button
                      variant="outline"
                      className="bg-red-600 text-white hover:bg-red-500"
                      size="icon"
                      onClick={() => openDeleteModal(category)}
                      disabled={loading}
                    >
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </CardFooter>
              </Card>
            ))}
          </div>
        </div>

        {/* Dialog Modal for Adding/Editing Categories */}
        {isOpen && (
          <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogContent>
              <DialogHeader>
                <DialogTitle>
                  {selectedCategory ? "Edit Category" : "Add Category"}
                </DialogTitle>
              </DialogHeader>
              <form
                onSubmit={categoryForm.handleSubmit(onSubmit)}
                className="flex flex-col gap-2"
              >
                <Label htmlFor="name">Name</Label>
                <Input id="name" {...categoryForm.register("name")} />
                <DialogFooter>
                  <Button type="submit" disabled={loading}>
                    {loading ? (
                      <Loader2 className="animate-spin h-5 w-5" />
                    ) : selectedCategory ? (
                      "Save changes"
                    ) : (
                      "Create Category"
                    )}
                  </Button>
                </DialogFooter>
              </form>
            </DialogContent>
          </Dialog>
        )}
      </div>

      {/* Delete Confirmation Modal */}
      <ResponsiveModal
        open={isDeleteOpen}
        setOpen={setIsDeleteOpen}
        title={`Are you sure you want to delete "${selectedCategory?.name}"?`}
        description="This action cannot be undone."
        onConfirm={handleDelete}
        loading={loading}
      />
    </>
  );
};

export default Categories;

----------------------------------------------------------------------------------
This is project file of Client components: xsoftware/components/Client/Client.tsx
----------------------------------------------------------------------------------
"use client";
import React, { FC } from "react";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "../ui/breadcrumb";
import { DataTable } from "../data-table";
import { ClientType, columns } from "@/app/clients/columns";
import { Card } from "../ui/card";

interface ClientProps {
  data?: ClientType[];
}
const fakedata = [
  {
    id: "1",
    title: "Umumiy Mijozlar soni",
    count: 10,
    color: "text-primary",
  },
  {
    id: "2",
    title: "Doimiy Mijozlar",
    count: 2,
    color: "text-green-500",
  },
  {
    id: "4",
    title: "Passiv mijozlar",
    count: 5,
    color: "text-gray-400",
  },
  {
    id: "3",
    title: "Qora ro'yxatdagi mijozlar",
    count: 3,
    color: "text-red-500",
  },
];
const Client: FC<ClientProps> = ({ data }) => {
  console.log("datas", data);

  return (
    <div className="px-4 py-2 flex flex-col gap-4">
      <div className="flex flex-col w-full  gap-4">
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href="/">Home</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage className="font-medium">Mijozlar</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>

        <div className="flex w-full gap-4">
          {fakedata?.map((item) => (
            <Card
              key={item.id}
              className="w-1/4 flex flex-col gap-2 items-center justify-center "
            >
              <div className="flex flex-col gap-1">
                <h2 className=" text-gray-500">{item.title}</h2>
                <h1
                  className={item.color + " font-semibold text-3xl text-center"}
                >
                  {item.count} ta
                </h1>
              </div>
            </Card>
          ))}
        </div>
      </div>
      <DataTable
        columns={columns}
        data={data || []}
        searchcolumns="fullname"
        apiURL="client/"
        url="/clients/create-clients"
        buttonTitle="Mijoz Qo'shish"
      />
    </div>
  );
};

export default Client;

----------------------------------------------------------------------------------
This is project file of CreateClients component: xsoftware/components/Client/CreateClients.tsx
----------------------------------------------------------------------------------
"use client";
import { FormInput } from "@/interfaces";
import React, { FC } from "react";
import { z } from "zod";
import CreateForm from "../CreateForm";
import { ClientType } from "@/app/clients/columns";

interface CreateClientProps {
  updatedValues: ClientType;
  isUpdated: boolean;
  id: number;
}

const formSchema = z.object({
  fullname: z.string().min(1),
  email: z.string().optional(),
  phone_number: z.string().min(1),
  address: z.string().min(1),
  passportid: z.string().min(1),
  driverLicense: z.string().min(1),
  licenseExpiry: z.date().min(new Date("1900-01-01"), "Yilni kiriting"),
  age: z.preprocess((val) => Number(val), z.number().min(1)),
  status: z.enum(["Active", "InActive", "Blacklisted"]),
});

const inputs: FormInput<typeof formSchema>[] = [
  {
    title: "Mijoz Ma'lumotlari",
    fields: [
      {
        type: "single_line",
        inputType: "text",
        label: "Full name",
        placeholder: "Ismoil Karimov",
        name: "fullname",
      },
      {
        type: "single_line",
        inputType: "email",
        label: "Email",
        placeholder: "javlon@gmail.com",
        name: "email",
      },
      {
        type: "single_line",
        inputType: "text",
        label: "Phone number",
        placeholder: "+998930678542",
        name: "phone_number",
      },
      {
        type: "single_line",
        inputType: "text",
        label: "Yashash manzili",
        placeholder: " 39-uy, Yunusobod, Toshkent",
        name: "address",
      },

      {
        type: "single_line",
        inputType: "text",
        label: "Passport ID",
        placeholder: "AC4560223",
        name: "passportid",
      },
      {
        type: "single_line",
        inputType: "text",
        label: "Driver license",
        placeholder: "313132156as",
        name: "driverLicense",
      },
      {
        type: "datePicker",
        inputType: "date",
        label: "License expiry",
        name: "licenseExpiry",
      },
      {
        type: "single_line",
        inputType: "number",
        label: "Age",
        placeholder: "20",
        name: "age",
      },

      {
        type: "select",
        label: "Mijozning holati",
        placeholder: "Active",
        name: "status",
        options: [
          { label: "Active", value: "Active" },
          { label: "Inactive", value: "InActive" },
          { label: "Blacklisted", value: "Blacklisted" },
        ],
      },
    ],
  },
];

const CreateClient: FC<CreateClientProps> = ({
  updatedValues,
  isUpdated,
  id,
}) => {
  return (
    <CreateForm<typeof formSchema>
      inputs={inputs}
      formSchema={formSchema}
      pageTitle="Yangi mijozlarni qo'shish"
      url="client/"
      pageUrl="/clients"
      toastMessage="Mijoz"
      updatedValues={updatedValues}
      isUpdated={isUpdated}
      id={id}
    />
  );
};

export default CreateClient;

----------------------------------------------------------------------------------
This is project file of Reservation component: xsoftware/components/Reservation/Reservation.tsx
----------------------------------------------------------------------------------
import { columns, Rental } from "@/app/reservations/columns";
import React, { FC } from "react";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "../ui/breadcrumb";
import { DataTable } from "../data-table";

interface ReservationProps {
  data?: Rental[];
}
const Reservation: FC<ReservationProps> = ({ data }) => {
  return (
    <div className="px-4 py-2 flex flex-col gap-4">
      <div className="flex justify-between items-center w-full">
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href="/">Home</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage className="font-medium">
                Buyurtmalar
              </BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>
      </div>
      <DataTable
        columns={columns}
        data={data || []}
        searchcolumns="carType"
        isReservation
        url=""
        buttonTitle="Buyurtma qo'shish"
      />
    </div>
  );
};

export default Reservation;

----------------------------------------------------------------------------------
This is project file of User component: xsoftware/components/Staffs/User.tsx
----------------------------------------------------------------------------------
"use client";

import React, { FC } from "react";
import { DataTable } from "../data-table";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "../ui/breadcrumb";
import { columns, Staff } from "@/app/staffs/columns";
import { Card } from "../ui/card";
// import { useUser } from "@/providers/UserProvider";
// import { useRouter } from "next/navigation";

interface UserProps {
  data?: Staff[];
}

const fakedata = [
  {
    id: "1",
    title: "Umumiy Mijozlar soni",
    count: 10,
    color: "text-primary",
  },
  {
    id: "2",
    title: "Umumiy Oyliklar",
    count: "20,000,000 sum",
    color: "text-primary",
  },
  {
    id: "4",
    title: "Ishlayotgan Xodimlar",
    count: 5,
    color: "text-green-500",
  },
  {
    id: "3",
    title: "Ta'tildagi Xodimlar",
    count: 3,
    color: "text-yellow-500",
  },
];

const Staffs: FC<UserProps> = ({ data }) => {
  return (
    <div className="px-4 py-2 flex flex-col gap-4">
      <div className="flex flex-col w-full  gap-4">
        <Breadcrumb>
          <BreadcrumbList>
            <BreadcrumbItem>
              <BreadcrumbLink href="/">Home</BreadcrumbLink>
            </BreadcrumbItem>
            <BreadcrumbSeparator />
            <BreadcrumbItem>
              <BreadcrumbPage className="font-medium">Xodimlar</BreadcrumbPage>
            </BreadcrumbItem>
          </BreadcrumbList>
        </Breadcrumb>

        <div className="flex w-full gap-4">
          {fakedata?.map((item) => (
            <Card
              key={item.id}
              className="w-1/4 flex flex-col gap-2 items-center justify-center "
            >
              <div className="flex flex-col gap-1 text-center">
                <h2 className=" text-gray-500">{item.title}</h2>
                <h1
                  className={item.color + " font-semibold text-3xl text-center"}
                >
                  {item.count}
                </h1>
              </div>
            </Card>
          ))}
        </div>
      </div>
      <DataTable
        columns={columns}
        data={data || []}
        searchcolumns="fullname"
        apiURL="employee/"
        url="/staffs/create-staffs"
        buttonTitle="Xodim Qo'shish"
      />
    </div>
  );
};

export default Staffs;

----------------------------------------------------------------------------------
This is project file of CreateStaffs component: xsoftware/components/Staffs/CreateStaffs.tsx
----------------------------------------------------------------------------------
"use client";
import { FormInput } from "@/interfaces";
import React, { FC } from "react";
import { z } from "zod";
import CreateForm from "../CreateForm";
import { IBranches } from "@/app/cars/create-car/page";

interface ICreateStaffs {
  branchs: IBranches[];
  updatedValues?: z.infer<typeof formSchema>;
  isUpdated?: boolean;
  id?: number;
}
const formSchema = z.object({
  fullname: z.string().min(1),
  phone_number: z.string().min(1),
  position: z.string().min(1),
  gender: z.enum(["Male", "Female"]),
  dob: z.date().min(new Date("1900-01-01"), "Yilni kiriting"),
  employmentType: z.enum(["Full_time", "Part_time", "Contract"]),
  hireDate: z.date().min(new Date("1900-01-01"), "Yilni kiriting"),
  branch: z.preprocess((val) => Number(val), z.number().min(1)),
  salary: z.preprocess((val) => Number(val), z.number().min(1)),
  workStatus: z.enum(["Active", "Vacation", "Fired"]),
  image: z
    .any()
    .refine(
      (files) => files instanceof FileList,
      "Please upload at least one image"
    )
    .optional(),
});

const CreateStaff: FC<ICreateStaffs> = ({
  branchs,
  updatedValues,
  isUpdated,
  id,
}) => {
  const inputs: FormInput<typeof formSchema>[] = [
    {
      title: "Xodimlarni ma'lumotlari",
      fields: [
        {
          type: "single_line",
          inputType: "text",
          label: "Ism-familiya",
          placeholder: "Mirjalol Karimov",
          name: "fullname",
        },
        {
          type: "select",
          inputType: "text",
          label: "Jinsi",
          name: "gender",
          placeholder: "Erkak",
          options: [
            { label: "Erkak", value: "Male" },
            { label: "Ayol", value: "Female" },
          ],
        },
        {
          type: "single_line",
          inputType: "text",
          label: "Telefon raqami",
          placeholder: "+998930690225",
          name: "phone_number",
        },
        {
          type: "datePicker",
          inputType: "date",
          label: "Tug'ilgan sanasi",
          name: "dob",
        },
        {
          type: "single_line",
          inputType: "text",
          label: "Mansabi",
          placeholder: "Menejer",
          name: "position",
        },
        {
          type: "datePicker",
          inputType: "date",
          label: "Ishga olingan sanasi",
          name: "hireDate",
        },
        {
          type: "select",
          label: "Ish joyi",
          name: "branch",
          placeholder: "Yunusobod",
          options: branchs?.map((branch: IBranches) => ({
            id: branch.id,
            label: branch.name,
            value: branch.id.toString(),
          })),
        },
        {
          type: "single_line",
          inputType: "number",
          label: "Oylik maosh",
          placeholder: "15000",
          name: "salary",
        },
        {
          type: "select",
          label: "Ish turi",
          name: "employmentType",
          placeholder: "Ish turi",
          options: [
            { label: "To'liq staf", value: "Full_time" },
            { label: "Yarim staf", value: "Part_time" },
            { label: "Kontrakt", value: "Contract" },
          ],
        },
        {
          type: "select",
          label: "Status",
          name: "workStatus",
          placeholder: "Ish holatini tanlang",
          options: [
            { label: "Active", value: "Active" },
            { label: "Ta'tilda", value: "Vacation" },
            { label: "Bo'shagan", value: "Fired" },
          ],
        },
      ],
    },
    // {
    //   type: "multi_image",
    //   // inputType: "file",
    //   label: "Xodimning rasmi",
    //   name: "image",
    // },
  ];

  console.log("updatedValues", updatedValues);

  return (
    <CreateForm<typeof formSchema>
      inputs={inputs}
      formSchema={formSchema}
      pageTitle="Yangi xodimlarni qo'shish"
      url="employee/"
      pageUrl="/staffs"
      toastMessage="Xodim"
      updatedValues={updatedValues}
      isUpdated={isUpdated}
      id={id}
    />
  );
};

export default CreateStaff;
----------------------------------------------------------------------------------
This is project file of ui components: xsoftware/components/ui/datepicker.tsx
----------------------------------------------------------------------------------
"use client";

import * as React from "react";
import { format, getMonth, getYear, setMonth, setYear } from "date-fns";
import { Calendar as CalendarIcon } from "lucide-react";

import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./select";

interface DatePickerProps {
  startYear?: number;
  endYear?: number;
  selected?: Date;
  onChange?: (date: Date) => void;
}

export function DatePicker({
  startYear = getYear(new Date()) - 50,
  endYear = getYear(new Date()),
  selected,
  onChange,
}: DatePickerProps) {
  const [internalDate, setInternalDate] = React.useState<Date | undefined>(
    selected || new Date()
  );

  React.useEffect(() => {
    if (selected) {
      setInternalDate(selected);
    }
  }, [selected]);

  const handleDateChange = (date: Date | undefined) => {
    if (date) {
      setInternalDate(date);
      onChange?.(date);
    }
  };

  const months = [
    "January",
    "February",
    "March",
    "April",
    "May",
    "June",
    "July",
    "August",
    "September",
    "October",
    "November",
    "December",
  ];
  const years = Array.from(
    { length: endYear - startYear + 1 },
    (_, i) => startYear + i
  );

  const handleMonthChange = (month: string) => {
    if (!internalDate) return;
    const newDate = setMonth(internalDate, months.indexOf(month));
    handleDateChange(newDate);
  };

  const handleYearChange = (year: string) => {
    if (!internalDate) return;
    const newDate = setYear(internalDate, parseInt(year));
    handleDateChange(newDate);
  };

  return (
    <Popover>
      <PopoverTrigger asChild>
        <Button
          variant={"outline"}
          className={cn(
            "w-full justify-start text-left font-normal",
            !internalDate && "text-muted-foreground"
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {internalDate ? (
            format(internalDate, "dd-MM-yyyy")
          ) : (
            <span>Pick a date</span>
          )}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0">
        <div className="flex items-center gap-2 p-2">
          <Select
            onValueChange={handleMonthChange}
            value={internalDate ? months[getMonth(internalDate)] : ""}
          >
            <SelectTrigger className="w-1/2">
              <SelectValue placeholder="Month" />
            </SelectTrigger>
            <SelectContent>
              {months.map((month) => (
                <SelectItem key={month} value={month}>
                  {month}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
          <Select
            onValueChange={handleYearChange}
            value={internalDate ? getYear(internalDate).toString() : ""}
          >
            <SelectTrigger className="w-1/2">
              <SelectValue placeholder="Year" />
            </SelectTrigger>
            <SelectContent>
              {years.map((year) => (
                <SelectItem key={year} value={year.toString()}>
                  {year}
                </SelectItem>
              ))}
            </SelectContent>
          </Select>
        </div>

        <Calendar
          mode="single"
          selected={internalDate}
          onSelect={handleDateChange}
          initialFocus
          month={internalDate}
          onMonthChange={setInternalDate}
        />
      </PopoverContent>
    </Popover>
  );
}


----------------------------------------------------------------------------------
This is project file of ui components: xsoftware/components/ui/imageuploades.tsx
----------------------------------------------------------------------------------
import { ImageUp, PencilLine, Trash2 } from "lucide-react";
import React from "react";
import ImageUploading, { ImageListType } from "react-images-uploading";

interface ImageUploadProps {
  name: string;
  value: ImageListType;
  onChange: (imageList: ImageListType) => void;
}

const Imageuploades: React.FC<ImageUploadProps> = ({ value, onChange }) => {
  const maxNumber = 69;

  return (
    <div className="App">
      <ImageUploading
        multiple
        value={value}
        onChange={onChange}
        maxNumber={maxNumber}
      >
        {({
          imageList,
          onImageUpload,
          // onImageRemoveAll,
          onImageUpdate,
          onImageRemove,
          isDragging,
          dragProps,
        }) => (
          <div className="upload__image-wrapper">
            <button
              style={isDragging ? { color: "red" } : undefined}
              type="button"
              onClick={onImageUpload}
              {...dragProps}
              className="border border-solid w-full p-4 flex items justify-center rounded-md"
            >
              <ImageUp />
            </button>
            &nbsp;
            {/* <button onClick={onImageRemoveAll} type="button">
              Remove all images
            </button> */}
            <div
              className="grid gap-4"
              style={{
                gridTemplateColumns: "repeat(auto-fit, minmax(100px, 1fr))",
              }}
            >
              {imageList.map((image, index) => (
                <div
                  key={index}
                  className="image-item mt-4 flex flex-col gap-2 "
                >
                  <img
                    src={image.dataURL !== undefined ? image.dataURL : ""}
                    alt="Uploaded image"
                    width="100"
                  />
                  <div className="image-item__btn-wrapper flex gap-2">
                    <button
                      onClick={() => onImageUpdate(index)}
                      className="cursor-pointer"
                      type="button"
                    >
                      <PencilLine />
                    </button>
                    <button
                      onClick={() => onImageRemove(index)}
                      type="button"
                      className="cursor-pointer"
                    >
                      <Trash2 />
                    </button>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}
      </ImageUploading>
    </div>
  );
};

export default Imageuploades;

----------------------------------------------------------------------------------
This is project file of ui components: xsoftware/components/ui/multi-select.tsx
----------------------------------------------------------------------------------
"use client";

import { FC } from "react";
import ReactSelect from "react-select";
import makeAnimated from "react-select/animated";

interface Option {
  options: { value: string; label: string }[];
  value: number[]; // ID lar raqam bo‘lishi kerak
  onChange: (values: number[]) => void; // Faqat ID larni qaytaramiz
}

const animatedComponents = makeAnimated();

const MultiSelect: FC<Option> = ({ options, value, onChange }) => {
  return (
    <ReactSelect
      isMulti
      options={options}
      components={animatedComponents}
      getOptionLabel={(e) => e.label}
      onChange={(selectedOptions) => {
        const selectedIds = selectedOptions.map((opt) => Number(opt.value));
        onChange(selectedIds);
      }}
      value={options.filter(
        (option) =>
          Array.isArray(value) && value?.includes(Number(option.value))
      )}
      instanceId="multi-select"
    />
  );
};

export default MultiSelect;

----------------------------------------------------------------------------------
This is project file of AppSidebar component: xsoftware/components/app-sidebar.tsx
----------------------------------------------------------------------------------
"use client";

import * as React from "react";
import {
  Car,
  Command,
  Contact,
  GalleryVerticalEnd,
  Landmark,
  ShoppingCart,
  Users,
} from "lucide-react";

import { NavMain } from "@/components/nav-main";
import { NavUser } from "@/components/nav-user";
import {
  Sidebar,
  SidebarContent,
  SidebarFooter,
  SidebarHeader,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarRail,
} from "@/components/ui/sidebar";
import { NavProjects } from "./nav-projects";
import { Separator } from "./ui/separator";
import Link from "next/link";

const data = {
  user: {
    name: "shadcn",
    email: "m@example.com",
    avatar: "",
  },

  navMain: [
    {
      title: "Vehicles",
      icon: Car,
      isActive: true,
      items: [
        {
          title: "Categories",
          url: "/category",
        },
        {
          title: "Cars",
          url: "/cars",
        },
      ],
    },
  ],
  navSecondary: [
    {
      title: "Dashboard",
      url: "/",
      icon: GalleryVerticalEnd,
      isActive: true,
    },
    {
      title: "Reservations",
      url: "/reservations",
      icon: ShoppingCart,
      isActive: true,
    },
    // {
    //   title: "Schedule",
    //   url: "/schedule",
    //   icon: CalendarSync,
    //   isActive: true,
    // },
    {
      title: "Staffs",
      url: "/staffs",
      icon: Contact,
      isActive: true,
    },
    {
      title: "Clients",
      url: "/clients",
      icon: Users,
      isActive: true,
    },
    {
      title: "Filiallar",
      url: "/branch",
      icon: Landmark,
      isActive: true,
    },
  ],
};

export function AppSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {
  return (
    <Sidebar collapsible="icon" {...props}>
      <SidebarHeader>
        <SidebarMenu>
          <SidebarMenuItem>
            <SidebarMenuButton size="lg" asChild>
              <Link href="/">
                <div className="flex aspect-square size-8 items-center justify-center rounded-lg bg-sidebar-primary text-sidebar-primary-foreground">
                  <Command className="size-4" />
                </div>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-semibold">X Inc</span>
                  <span className="truncate text-xs">Software</span>
                </div>
              </Link>
            </SidebarMenuButton>
          </SidebarMenuItem>
        </SidebarMenu>
      </SidebarHeader>
      <Separator
        orientation="horizontal"
        className="mr-2 data-[orientation=vertical]:h-4"
      />

      <SidebarContent className="pt-2">
        <NavProjects projects={data.navSecondary} />
        <NavMain items={data.navMain} />
      </SidebarContent>

      <Separator
        orientation="horizontal"
        className="mr-2 data-[orientation=vertical]:h-4"
      />
      <SidebarFooter>
        <NavUser user={data.user} />
      </SidebarFooter>
      <SidebarRail />
    </Sidebar>
  );
}


----------------------------------------------------------------------------------
This is project file of  carstable component: xsoftware/components/carstable.tsx
----------------------------------------------------------------------------------
"use client";

import { useMemo, useState } from "react";
import {
  ChevronDown,
  ChevronRight,
  User,
  Phone,
  MoreHorizontal,
  Pencil,
  Trash2,
  Plus,
} from "lucide-react";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import { Checkbox } from "@/components/ui/checkbox";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import Image from "next/image";
import { Vehicle } from "@/app/cars/page";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "./ui/dropdown-menu";
import {
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "./ui/pagination";
import { useRouter } from "next/navigation";
import { FeaturesIcon } from "@/Icons/FeaturesIcon";
import { ResponsiveModal } from "./ResponsiveModal";
import { Fragment } from "react";

interface CarsTableProps {
  data?: Vehicle[];
  buttonTitle?: string;
}

export default function CarsTable({ data = [], buttonTitle }: CarsTableProps) {
  const [selectedRows, setSelectedRows] = useState<number[]>([]);
  const [expandedRows, setExpandedRows] = useState<number[]>([]);
  const [filterText, setFilterText] = useState("");
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(10);
  const [open, setOpen] = useState(false);

  const router = useRouter();

  // Status badge colors
  const statusColors: Record<string, string> = {
    "Bo'sh": "bg-green-500 hover:bg-green-600",
    Ijarada: "bg-red-500 hover:bg-red-600",
    "Reserv qilingan": "bg-amber-500 hover:bg-amber-600",
  };

  const filteredData = useMemo(() => {
    if (!filterText) return data;

    const searchText = filterText.toLowerCase();
    return data.filter(
      (item) =>
        item.brand.toLowerCase().includes(searchText) ||
        item.model.toLowerCase().includes(searchText) ||
        item.license_plate.toLowerCase().includes(searchText) ||
        item.rental_status.toLowerCase().includes(searchText)
    );
  }, [data, filterText]);

  const paginatedData = useMemo(() => {
    const startIndex = (currentPage - 1) * pageSize;
    const endIndex = startIndex + pageSize;
    return filteredData.slice(startIndex, endIndex);
  }, [filteredData, currentPage, pageSize]);

  const totalPages = Math.ceil(filteredData.length / pageSize);
  console.log("filteredData", paginatedData);

  const toggleRowSelection = (id: number) => {
    setSelectedRows((prev) =>
      prev.includes(id) ? prev.filter((rowId) => rowId !== id) : [...prev, id]
    );
  };

  const toggleAllRows = () => {
    if (selectedRows.length === filteredData.length) {
      setSelectedRows([]);
    } else {
      setSelectedRows(filteredData.map((row) => row.id));
    }
  };

  const toggleRowExpansion = (id: number) => {
    setExpandedRows((prev) =>
      prev.includes(id) ? prev.filter((rowId) => rowId !== id) : [...prev, id]
    );
  };

  const handlePageSizeChange = (newSize: number) => {
    setPageSize(newSize);
    setCurrentPage(1);
  };

  const getStatusBadgeClass = (status: string) => {
    return statusColors[status] || "bg-gray-500 hover:bg-gray-600";
  };

  const handleDelete = async (id: number) => {
    const response = await fetch(
      `https://carmanagement-1-rmyc.onrender.com/api/v1/cars/${id}/`,
      {
        method: "DELETE",
      }
    );

    if (!response.ok) {
      throw new Error("Failed to delete client.");
    }
    console.log(`Client ${id} deleted successfully`);
    setOpen(false);
    window.location.reload();
  };

  const PaginationControls = () => (
    <Pagination>
      <PaginationContent>
        <PaginationItem>
          <PaginationPrevious
            href="#"
            onClick={() => setCurrentPage((prev) => Math.max(prev - 1, 1))}
            aria-disabled={currentPage === 1}
          />
        </PaginationItem>
        {Array.from({ length: totalPages }, (_, index) => (
          <PaginationItem key={index + 1}>
            <PaginationLink
              href="#"
              onClick={() => setCurrentPage(index + 1)}
              isActive={currentPage === index + 1}
            >
              {index + 1}
            </PaginationLink>
          </PaginationItem>
        ))}
        <PaginationItem>
          <PaginationNext
            href="#"
            onClick={() =>
              setCurrentPage((prev) => Math.min(prev + 1, totalPages))
            }
            aria-disabled={currentPage === totalPages}
          />
        </PaginationItem>
      </PaginationContent>
    </Pagination>
  );

  return (
    <div className="w-full mx-auto">
      <div className="mb-4 flex items-center justify-between">
        <Input
          placeholder="Search cars..."
          value={filterText}
          onChange={(e) => setFilterText(e.target.value)}
          className="max-w-md border-input"
        />

        <Button
          className="flex gap-2 cursor-pointer"
          onClick={() => {
            router.push("/cars/create-car");
          }}
        >
          <Plus />
          {buttonTitle}
        </Button>
      </div>

      <div className="border rounded-md">
        <Table>
          <TableHeader>
            <TableRow className="bg-muted/50">
              <TableHead className="w-10 p-4">
                <Checkbox
                  checked={
                    selectedRows.length === filteredData.length &&
                    filteredData.length > 0
                  }
                  onCheckedChange={toggleAllRows}
                  aria-label="Select all"
                />
              </TableHead>
              <TableHead className="w-10 p-4"></TableHead>
              <TableHead>Photo</TableHead>
              <TableHead>Car</TableHead>
              <TableHead>Category</TableHead>
              <TableHead>License Plate</TableHead>
              <TableHead>Seats</TableHead>
              <TableHead>Transmission</TableHead>
              <TableHead>Filial</TableHead>
              <TableHead>Rental Price</TableHead>
              <TableHead>Status</TableHead>
              <TableHead>Actions</TableHead>
            </TableRow>
          </TableHeader>

          <TableBody>
            {paginatedData?.map((car) => (
              <Fragment key={car?.id}>
                <TableRow
                  className="border-t cursor-pointer"
                  onClick={() => toggleRowExpansion(car?.id)}
                >
                  <TableCell className="p-4">
                    <Checkbox
                      checked={selectedRows.includes(car?.id)}
                      onCheckedChange={() => toggleRowSelection(car?.id)}
                      aria-label={`Select car ${car?.id}`}
                    />
                  </TableCell>
                  <TableCell className="p-4">
                    <Button
                      variant="ghost"
                      size="icon"
                      aria-label={
                        expandedRows.includes(car?.id)
                          ? "Collapse details"
                          : "Expand details"
                      }
                      className="cursor-pointer"
                    >
                      {expandedRows.includes(car?.id) ? (
                        <ChevronDown className="h-4 w-4" />
                      ) : (
                        <ChevronRight className="h-4 w-4" />
                      )}
                    </Button>
                  </TableCell>
                  <TableCell>
                    <Image
                      src={`https://carmanagement-1-rmyc.onrender.com${
                        car.images?.[0]?.photo || ""
                      }`}
                      alt={`${car.brand}`}
                      width={80}
                      height={60}
                      className="rounded-md object-cover"
                    />
                  </TableCell>
                  <TableCell>
                    <div className="font-medium capitalize">{car.model}</div>
                    <div className="text-muted-foreground capitalize">
                      {car.brand}
                    </div>
                  </TableCell>
                  {/* <TableCell className="capitalize">{car.category}</TableCell> */}
                  <TableCell className="capitalize">
                    {car.license_plate}
                  </TableCell>
                  <TableCell>{car.seating_capacity}</TableCell>
                  <TableCell className="capitalize">
                    {car.transmission}
                  </TableCell>
                  <TableCell className="capitalize">
                    {car.branch.name}
                  </TableCell>
                  <TableCell>{car.rental_price_per_day} / day</TableCell>
                  <TableCell>
                    <Badge className={getStatusBadgeClass(car.rental_status)}>
                      {car.rental_status}
                    </Badge>
                  </TableCell>

                  <TableCell>
                    <DropdownMenu>
                      <DropdownMenuTrigger asChild>
                        <Button variant="ghost" className="h-8 w-8 p-0">
                          <span className="sr-only">Open menu</span>
                          <MoreHorizontal className="h-4 w-4" />
                        </Button>
                      </DropdownMenuTrigger>
                      <DropdownMenuContent align="end">
                        <DropdownMenuLabel>Actions</DropdownMenuLabel>
                        <DropdownMenuItem
                          onClick={() =>
                            router.push("/cars/create-car?id=" + car?.id)
                          }
                          className="flex items-center gap-2"
                        >
                          <Pencil className="h-4 w-4" /> Update
                        </DropdownMenuItem>
                        <DropdownMenuSeparator />
                        <DropdownMenuItem
                          onClick={() => {
                            setOpen(true);
                          }}
                          className="flex items-center gap-2 text-red-500"
                        >
                          <Trash2 className="h-4 w-4" /> Delete
                        </DropdownMenuItem>
                      </DropdownMenuContent>
                    </DropdownMenu>
                    <ResponsiveModal
                      open={open}
                      setOpen={setOpen}
                      title={`${car.model} fillialini o'chirmoqchimisiz??`}
                      description="Shu branchni o‘chirishni tasdiqlaysizmi?"
                      onConfirm={() => handleDelete(Number(car?.id))}
                    />
                  </TableCell>
                </TableRow>

                {expandedRows.includes(car?.id) && (
                  <TableRow className="w-full bg-muted hover:bg-trnasparent">
                    <TableCell colSpan={12} className="p-0">
                      <div className="p-6">
                        <Tabs defaultValue="details" className="w-full ">
                          <TabsList className="mb-4">
                            <TabsTrigger
                              value="details"
                              className="cursor-pointer"
                            >
                              Car Details
                            </TabsTrigger>
                            <TabsTrigger
                              value="photos"
                              className="cursor-pointer"
                            >
                              Photos
                            </TabsTrigger>
                            <TabsTrigger
                              value="features"
                              className="cursor-pointer"
                            >
                              Features
                            </TabsTrigger>
                          </TabsList>

                          {/* Details Tab */}
                          <TabsContent
                            value="details"
                            className="space-y-4 w-full"
                          >
                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                              {/* Left Column */}
                              <div className="space-y-4">
                                <Card>
                                  <CardContent className="p-4">
                                    <h3 className="text-lg font-semibold mb-3">
                                      Basic Information
                                    </h3>
                                    <div className="grid grid-cols-2 gap-4">
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Brand
                                        </div>
                                        <div className="font-medium capitalize">
                                          {car.brand}
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Model
                                        </div>
                                        <div className="font-medium capitalize">
                                          {car.model}
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          License Plate
                                        </div>
                                        <div className="font-medium capitalize">
                                          {car.license_plate}
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Year
                                        </div>
                                        <div className="font-medium">
                                          {car.year}
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground ">
                                          Color
                                        </div>
                                        <div className="font-medium capitalize">
                                          {car.color}
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Mashinaning Fillial
                                        </div>
                                        <div className="font-medium capitalize">
                                          {car.branch.name}
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Status
                                        </div>
                                        <Badge
                                          className={getStatusBadgeClass(
                                            car.rental_status
                                          )}
                                        >
                                          {car.rental_status}
                                        </Badge>
                                      </div>
                                    </div>
                                  </CardContent>
                                </Card>

                                <Card>
                                  <CardContent className="p-4">
                                    <h3 className="text-lg font-semibold mb-3">
                                      Technical Specifications
                                    </h3>
                                    <div className="grid grid-cols-2 gap-4">
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Fuel Type
                                        </div>
                                        <div className="font-medium capitalize">
                                          {car.fuel_type}
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Transmission
                                        </div>
                                        <div className="font-medium capitalize">
                                          {car.transmission}
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Engine Size
                                        </div>
                                        <div className="font-medium">
                                          {car.engine_size}
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Mileage
                                        </div>
                                        <div className="font-medium">
                                          {car.mileage} km
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Seating Capacity
                                        </div>
                                        <div className="font-medium">
                                          {car.seating_capacity} seats
                                        </div>
                                      </div>
                                    </div>
                                  </CardContent>
                                </Card>
                              </div>

                              {/* Right Column */}
                              <div className="space-y-4">
                                <Card>
                                  <CardContent className="p-4">
                                    <h3 className="text-lg font-semibold mb-3">
                                      Rental Information
                                    </h3>
                                    <div className="space-y-3">
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Daily Rental Price
                                        </div>
                                        <div className="font-medium text-lg">
                                          {car.rental_price_per_day} / day
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Deposit Required
                                        </div>
                                        <div className="font-medium">
                                          {car.deposit}
                                        </div>
                                      </div>
                                      <div>
                                        <div className="text-sm text-muted-foreground">
                                          Minimum Age
                                        </div>
                                        <div className="font-medium">
                                          {car.minimum_age} years
                                        </div>
                                      </div>
                                    </div>
                                  </CardContent>
                                </Card>

                                <Card>
                                  <CardContent className="p-4">
                                    <h3 className="text-lg font-semibold mb-3">
                                      Owner Information
                                    </h3>
                                    <div className="space-y-3">
                                      <div className="flex items-center gap-2">
                                        <User className="h-4 w-4 text-muted-foreground" />
                                        <div className="font-medium">
                                          {car.owner_name}
                                        </div>
                                      </div>
                                      <div className="flex items-center gap-2">
                                        <Phone className="h-4 w-4 text-muted-foreground" />
                                        <div className="font-medium">
                                          {car.owner_phone}
                                        </div>
                                      </div>
                                    </div>
                                  </CardContent>
                                </Card>

                                <Card className="w-full rounded-lg">
                                  <CardContent className="flex flex-col gap-2 p-4 w-full">
                                    <h3 className="text-lg font-semibold mb-3">
                                      Description
                                    </h3>
                                    <p className="text-sm text-gray-700 leading-normal break-words whitespace-normal max-w-full">
                                      {car.description}
                                    </p>
                                  </CardContent>
                                </Card>
                              </div>
                            </div>
                          </TabsContent>

                          {/* Photos Tab */}
                          <TabsContent value="photos">
                            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                              {car?.images?.map((photo, index) => (
                                <div
                                  key={index}
                                  className="rounded-lg overflow-hidden"
                                >
                                  <Image
                                    src={`https://carmanagement-1-rmyc.onrender.com${photo?.photo}`}
                                    alt={`${car?.brand}`}
                                    width={500}
                                    height={300}
                                    className="w-full h-auto object-cover"
                                  />
                                </div>
                              ))}
                            </div>
                          </TabsContent>

                          {/* Features Tab */}
                          <TabsContent value="features">
                            <Card>
                              <CardContent className="p-4">
                                <h3 className="text-lg font-semibold mb-4">
                                  Car Features
                                </h3>
                                <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
                                  {car?.features?.map((feature, index) => {
                                    const FeatureIcon = FeaturesIcon(
                                      feature.icon
                                    );

                                    return (
                                      <div
                                        key={index}
                                        className="flex items-center gap-4"
                                      >
                                        {FeatureIcon && <FeatureIcon />}
                                        <span>{feature?.name}</span>
                                      </div>
                                    );
                                  })}
                                </div>
                              </CardContent>
                            </Card>
                          </TabsContent>
                        </Tabs>
                      </div>
                    </TableCell>
                  </TableRow>
                )}
              </Fragment>
            ))}
          </TableBody>
        </Table>
      </div>

      <div className="mt-4 flex items-center justify-between">
        <div className="flex items-center gap-2">
          <span>Show:</span>
          <DropdownMenu>
            <DropdownMenuTrigger asChild>
              <Button variant="outline" className="h-8">
                {pageSize} <ChevronDown className="ml-2 h-4 w-4" />
              </Button>
            </DropdownMenuTrigger>
            <DropdownMenuContent>
              {[1, 10, 20, 50, 100].map((size) => (
                <DropdownMenuItem
                  key={size}
                  onClick={() => handlePageSizeChange(size)}
                >
                  {size}
                </DropdownMenuItem>
              ))}
            </DropdownMenuContent>
          </DropdownMenu>
        </div>
        <PaginationControls />
      </div>
    </div>
  );
}

----------------------------------------------------------------------------------
This is project file of  CreateForm component: xsoftware/components/CreateForm.tsx
----------------------------------------------------------------------------------
"use client";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import * as z from "zod";
import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { FormInput, InputGroup, InputInterface } from "@/interfaces";
import { ZodType } from "zod";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "./ui/select";
import { Textarea } from "./ui/textarea";
import dynamic from "next/dynamic";
import Imageuploades from "./ui/imageuploades";
import "react-day-picker/dist/style.css";
import { useRouter } from "next/navigation";
import { toast } from "sonner";
import Cookies from "js-cookie";
import { format, getYear } from "date-fns";
import { DatePicker } from "./ui/datepicker";

interface ICreateFormProps<T extends ZodType> {
  inputs: FormInput<T>[];
  formSchema: T;
  pageTitle?: string;
  url?: string;
  pageUrl?: string;
  updatedValues?: z.infer<T>;
  isUpdated?: boolean;
  toastMessage?: string;
  id?: number;
}

const CreateForm = <T extends ZodType>({
  inputs,
  formSchema,
  pageTitle,
  url,
  pageUrl,
  updatedValues,
  isUpdated,
  toastMessage,
  id,
}: ICreateFormProps<T>) => {
  const form = useForm<z.infer<T>>({
    resolver: zodResolver(formSchema),
    defaultValues: isUpdated
      ? updatedValues
      : (Object.fromEntries(
          inputs.flatMap((input) =>
            "name" in input
              ? [[input.name, ""]]
              : input.fields.map((field) => [field.name, ""])
          )
        ) as z.infer<T>),
  });

  // console.log("defaultValues", updatedValues, "isUpdated", isUpdated);

  const router = useRouter();

  const MultiSelect = dynamic(() => import("./ui/multi-select"), {
    ssr: false,
  });

  async function onSubmit(values: z.infer<typeof formSchema>) {
    try {
      const formData = new FormData();
      const token = Cookies.get("token");

      // Ensure `values.images` is always an array
      const images = values.images ?? [];
      images.forEach((image: { file: Blob }, index: number) => {
        formData.append(
          `images`,
          image.file,
          `image_${index}.${image.file.type.split("/")[1]}`
        );
      });

      Object.keys(values).forEach((key) => {
        if (key !== "images" && key !== "features") {
          let value = values[key];

          if (value instanceof Date) {
            value = format(value, "yyyy-MM-dd");
          }

          formData.append(key, String(value));
        }
      });

      // Append features as separate entries
      if (Array.isArray(values.features) && values.features.length > 0) {
        values.features.forEach((featureId: number) => {
          formData.append("features", String(featureId));
        });
      } else {
        console.warn("No features selected");
      }

      const response = await fetch(
        id
          ? `https://carmanagement-1-rmyc.onrender.com/api/v1/${url}${id}/`
          : `https://carmanagement-1-rmyc.onrender.com/api/v1/${url}`,
        {
          method: isUpdated ? "PUT" : "POST",
          headers: {
            Authorization: `Bearer ${token}`,
          },
          body: formData,
        }
      );

      if (!response.ok) {
        throw new Error("Failed to create car.");
      }

      pageUrl && router.push(pageUrl);

      const message = id
        ? `${toastMessage} muvaffaqiyatli o'zgartirildi`
        : `${toastMessage} muvaffaqiyatli qo'shildi`;

      toast.success(message, {
        position: "top-right",
        closeButton: true,
        style: {
          backgroundColor: "green",
          color: "white",
        },
      });
    } catch (error: any) {
      toast.error(
        error.message ||
          `${toastMessage} qo'shilmadi. Iltimos qayta urinib ko'ring`,
        {
          position: "top-right",
          closeButton: true,
          style: {
            border: "1px solid red",
            backgroundColor: "red",
            color: "white",
          },
        }
      );
    }
  }

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-8  p-4">
        <h1 className="flex items-center justify-center p-4 text-2xl font-bold text-center w-full rounded-md bg-black text-white">
          {pageTitle}
        </h1>
        {inputs.map((input, index) => {
          const inputObj = input as InputInterface<T>;
          const inputGroup = input as InputGroup<T>;

          if (inputObj.type === "single_line") {
            return (
              <FormField
                key={inputObj.name}
                control={form.control}
                name={inputObj.name}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{inputObj.label}</FormLabel>
                    <FormControl>
                      <Input
                        placeholder={inputObj.placeholder}
                        type={inputObj.inputType}
                        {...field}
                        onChange={(event) => {
                          inputObj.inputType === "number"
                            ? field.onChange(Number(event.target.value))
                            : field.onChange(event.target.value);
                        }}
                        value={field.value ?? ""}
                      />
                    </FormControl>

                    <FormMessage />
                  </FormItem>
                )}
              />
            );
          }

          if (inputObj.type === "multi_line") {
            return (
              <FormField
                key={inputObj.name}
                control={form.control}
                name={inputObj.name}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{inputObj.label}</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder={inputObj.placeholder}
                        {...field}
                        className="h-32 resize-none"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            );
          }
          if (inputObj.type === "select" && inputObj.options) {
            return (
              <FormField
                key={inputObj.name}
                control={form.control}
                name={inputObj.name}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{inputObj.label}</FormLabel>
                    <FormControl>
                      <Select
                        onValueChange={field.onChange}
                        defaultValue={field.value}
                      >
                        <SelectTrigger>
                          <SelectValue placeholder={inputObj.placeholder} />
                        </SelectTrigger>
                        <SelectContent>
                          {inputObj.options?.map((option) => (
                            <SelectItem key={option.value} value={option.value}>
                              <div className="flex items-center space-x-2">
                                {option.color && (
                                  <span
                                    className="w-4 h-4 rounded-full border"
                                    style={{ backgroundColor: option.color }}
                                  ></span>
                                )}
                                <span>{option.label}</span>
                              </div>
                            </SelectItem>
                          ))}
                        </SelectContent>
                      </Select>
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            );
          }

          if ("fields" in inputGroup) {
            return (
              <div
                key={index}
                className="space-y-4 border-2 border-solid border-gray-400 rounded-md p-4"
              >
                <h2 className="text-lg font-semibold">{inputGroup.title}</h2>
                <div
                  className="grid gap-4"
                  style={{
                    gridTemplateColumns: "repeat(auto-fit, minmax(250px, 1fr))",
                  }}
                >
                  {Array.isArray(inputGroup.fields) &&
                    inputGroup.fields.map((item) => (
                      <FormField
                        key={item.name}
                        control={form.control}
                        name={item.name}
                        render={({ field }) => (
                          <FormItem className="w-full">
                            <FormLabel>{item.label}</FormLabel>
                            <FormControl>
                              {item.type === "single_line" ? (
                                <Input
                                  type={item.inputType}
                                  placeholder={item.placeholder}
                                  {...field}
                                  onChange={(event) => {
                                    item.inputType === "number"
                                      ? field.onChange(
                                          Number(event.target.value)
                                        )
                                      : field.onChange(event.target.value);
                                  }}
                                  value={field.value ?? ""}
                                />
                              ) : item.type === "select" ? (
                                <Select
                                  onValueChange={field.onChange}
                                  defaultValue={field.value}
                                >
                                  <SelectTrigger>
                                    <SelectValue
                                      placeholder={item.placeholder}
                                    />
                                  </SelectTrigger>
                                  <SelectContent>
                                    {item.options?.map((option, index) => (
                                      <SelectItem
                                        key={index}
                                        value={option.value}
                                      >
                                        {option.color ? (
                                          <span className="flex items-center gap-2">
                                            <span
                                              className="w-4 h-4 rounded-full"
                                              style={{
                                                backgroundColor: option.color,
                                              }}
                                            ></span>
                                            {option.label}
                                          </span>
                                        ) : (
                                          option.label
                                        )}
                                      </SelectItem>
                                    ))}
                                  </SelectContent>
                                </Select>
                              ) : item.type === "datePicker" ? (
                                <DatePicker
                                  selected={field.value}
                                  onChange={(date) => field.onChange(date)}
                                  endYear={
                                    pageUrl === "/clients"
                                      ? getYear(new Date()) + 100
                                      : getYear(new Date())
                                  }
                                />
                              ) : null}
                            </FormControl>
                            <FormMessage />
                          </FormItem>
                        )}
                      />
                    ))}
                </div>
              </div>
            );
          }
          if (inputObj.type === "multi_select" && inputObj.options) {
            return (
              <FormField
                key={inputObj.name}
                control={form.control}
                name={inputObj.name}
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>{inputObj.label}</FormLabel>
                    <FormControl>
                      <MultiSelect
                        options={inputObj.options ?? []}
                        value={field.value}
                        onChange={field.onChange}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
            );
          }
          if (inputObj.type === "multi_image") {
            return (
              <FormField
                key={inputObj.name}
                control={form.control}
                name={inputObj.name}
                render={({ field }) => {
                  return (
                    <FormItem>
                      <FormLabel>{inputObj.label}</FormLabel>
                      <FormControl>
                        <Imageuploades
                          name={inputObj.name}
                          value={field.value || []}
                          onChange={(imageList) => field.onChange(imageList)}
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  );
                }}
              />
            );
          }

          // if (inputObj.type === "single_image") {
          //   <FormField
          //     key={inputObj.name}
          //     control={form.control}
          //     name={inputObj.name}
          //     render={({ field }) => {
          //       return (
          //         <>
          //           {console.log("inputObj", inputObj.type === "single_image")}
          //           <FormItem>
          //             <FormLabel>{inputObj.label}</FormLabel>
          //             <FormControl>
          //               {/* <Input
          //               type={inputObj.inputType}
          //               {...field}
          //               onChange={(event) => {
          //                 inputObj.inputType === "file"
          //                   ? field.onChange(event.target.files)
          //                   : field.onChange(event.target.value);
          //               }}
          //               value={field.value ?? ""}
          //               accept="image/*"
          //             /> */}
          //               <input
          //                 type="file"
          //                 accept="image/*"
          //                 {...field}
          //                 onChange={(event) =>
          //                   field.onChange(event.target.files)
          //                 }
          //               />
          //             </FormControl>
          //             <FormMessage />
          //           </FormItem>
          //         </>
          //       );
          //     }}
          //   />;
          // }

          return null;
        })}
        <Button type="submit" className="w-full cursor-pointer">
          Submit
        </Button>
      </form>
    </Form>
  );
};

export default CreateForm;

----------------------------------------------------------------------------------
This is project file of  data-table component: xsoftware/components/data-table.tsx
----------------------------------------------------------------------------------
"use client";

import * as React from "react";
import { format, isWithinInterval, parseISO } from "date-fns";
import { CalendarIcon, Loader2, Plus } from "lucide-react";
import { DateRange } from "react-day-picker";
import {
  ColumnDef,
  ColumnFiltersState,
  SortingState,
  flexRender,
  useReactTable,
  getFilteredRowModel,
  getCoreRowModel,
  getPaginationRowModel,
  getSortedRowModel,
} from "@tanstack/react-table";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Calendar } from "@/components/ui/calendar";
import { Input } from "@/components/ui/input";
import {
  Popover,
  PopoverContent,
  PopoverTrigger,
} from "@/components/ui/popover";
import { CombinedPagination } from "@/components/DataTablePaginationProps";
import { DataTableViewOptions } from "@/components/DataTableViewOptions";
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import Link from "next/link";
import useSWR from "swr";
import Cookies from "js-cookie";

interface DataTableProps<TData, TValue> {
  columns: ColumnDef<TData, TValue>[];
  data: TData[];
  isReservation?: boolean;
  searchcolumns?: string | undefined;
  url?: string | undefined;
  buttonTitle?: string;
  apiURL?: string;
}
interface RentalData {
  pickup: { date: string };
  return: { date: string };
}

export const BASE_URL = "https://carmanagement-1-rmyc.onrender.com/api/v1/";

export function DataTable<TData, TValue>({
  columns,
  data,
  isReservation,
  searchcolumns,
  url,
  buttonTitle,
  apiURL,
}: DataTableProps<TData, TValue>) {
  // -------------- Fetch data from the server ------------------------------------/////
  const token = Cookies.get("token");
  const fetcher = (url: string) =>
    fetch(url, {
      headers: { Authorization: `Bearer ${token}` },
    }).then((res) => res.json());

  const { data: swrData, isLoading } = useSWR(`${BASE_URL}${apiURL}`, fetcher, {
    fallbackData: data,
  });

  ////////////////////////////////////////////////////////////////////////////////////////

  const [sorting, setSorting] = React.useState<SortingState>([]);
  const [columnFilters, setColumnFilters] = React.useState<ColumnFiltersState>(
    []
  );
  const [rowSelection, setRowSelection] = React.useState({});
  const [dateRange, setDateRange] = React.useState<DateRange | undefined>();

  // Filter data based on date range
  const filteredData = React.useMemo(() => {
    if (!isReservation || !dateRange?.from || !dateRange?.to)
      return swrData?.results ?? swrData;
    return swrData?.results?.filter((item: TData) => {
      const rentalItem = item as RentalData;
      const pickupDate = parseISO(rentalItem.pickup.date);
      const returnDate = parseISO(rentalItem.return.date);
      return (
        isWithinInterval(pickupDate, {
          start: dateRange.from ?? new Date(),
          end: dateRange.to ?? new Date(),
        }) ||
        isWithinInterval(returnDate, {
          start: dateRange.from ?? new Date(),
          end: dateRange.to ?? new Date(),
        })
      );
    });
  }, [swrData, dateRange, isReservation]);

  // React Table
  const table = useReactTable({
    data: filteredData,
    columns,
    getCoreRowModel: getCoreRowModel(),
    getPaginationRowModel: getPaginationRowModel(),
    onSortingChange: setSorting,
    getSortedRowModel: getSortedRowModel(),
    onColumnFiltersChange: setColumnFilters,
    onRowSelectionChange: setRowSelection,
    getFilteredRowModel: getFilteredRowModel(),
    state: { sorting, columnFilters, rowSelection },
  });

  return (
    <div>
      <div className="rounded-md border overflow-hidden w-full">
        <div className="flex justify-between items-center p-2 gap-4">
          <Input
            placeholder={`Search by ${searchcolumns ?? "default value"}`}
            value={
              (table
                .getColumn(`${searchcolumns}`)
                ?.getFilterValue() as string) ?? ""
            }
            onChange={(event) =>
              table
                .getColumn(`${searchcolumns}`)
                ?.setFilterValue(event.target.value)
            }
            className="max-w-sm"
          />
          <div className="flex flex-row gap-2">
            {isReservation && (
              <Popover>
                <PopoverTrigger asChild>
                  <Button
                    id="date"
                    variant="outline"
                    className={cn(
                      "w-[300px] justify-start text-left font-normal rounded-md w-max",
                      !dateRange && "text-muted-foreground"
                    )}
                  >
                    <CalendarIcon className="mr-2 h-4 w-4" />
                    {dateRange?.from ? (
                      dateRange.to ? (
                        <>
                          {format(dateRange.from, "LLL dd, y")} -{" "}
                          {format(dateRange.to, "LLL dd, y")}
                        </>
                      ) : (
                        format(dateRange.from, "LLL dd, y")
                      )
                    ) : (
                      <span>Pick a date range</span>
                    )}
                  </Button>
                </PopoverTrigger>
                <PopoverContent className="w-auto p-0" align="start">
                  <Calendar
                    initialFocus
                    mode="range"
                    defaultMonth={dateRange?.from}
                    selected={dateRange}
                    onSelect={setDateRange}
                    numberOfMonths={2}
                  />
                </PopoverContent>
              </Popover>
            )}
            <DataTableViewOptions table={table} />

            <Link href={url ?? "#"}>
              <Button className="flex gap-2 cursor-pointer">
                <Plus />
                {buttonTitle}
              </Button>
            </Link>
          </div>
        </div>
        {isLoading ? (
          <div className="flex justify-center items-center h-32">
            <Loader2 className="animate-spin" />
          </div>
        ) : (
          <Table>
            <TableHeader>
              {table.getHeaderGroups().map((headerGroup) => (
                <TableRow key={headerGroup.id}>
                  {headerGroup.headers.map((header) => (
                    <TableHead key={header.id}>
                      {header.isPlaceholder
                        ? null
                        : flexRender(
                            header.column.columnDef.header,
                            header.getContext()
                          )}
                    </TableHead>
                  ))}
                </TableRow>
              ))}
            </TableHeader>
            <TableBody>
              {table.getRowModel().rows?.length ? (
                table.getRowModel().rows.map((row) => (
                  <TableRow
                    key={row.id}
                    data-state={row.getIsSelected() && "selected"}
                  >
                    {row.getVisibleCells().map((cell) => (
                      <TableCell key={cell.id}>
                        {flexRender(
                          cell.column.columnDef.cell,
                          cell.getContext()
                        )}
                      </TableCell>
                    ))}
                  </TableRow>
                ))
              ) : (
                <TableRow>
                  <TableCell
                    colSpan={columns.length}
                    className="h-24 text-center"
                  >
                    No results.
                  </TableCell>
                </TableRow>
              )}
            </TableBody>
          </Table>
        )}
      </div>
      <CombinedPagination table={table} />
    </div>
  );
}

----------------------------------------------------------------------------------
This is project file of  DataTableColumnHeader component: xsoftware/components/DataTableColumnHeader.tsx
----------------------------------------------------------------------------------
import { Column } from "@tanstack/react-table"
import { ArrowDown, ArrowUp, ChevronsUpDown, EyeOff } from "lucide-react"

import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"

interface DataTableColumnHeaderProps<TData, TValue>
  extends React.HTMLAttributes<HTMLDivElement> {
  column: Column<TData, TValue>
  title: string
}

export function DataTableColumnHeader<TData, TValue>({
  column,
  title,
  className,
}: DataTableColumnHeaderProps<TData, TValue>) {
  if (!column.getCanSort()) {
    return <div className={cn(className)}>{title}</div>
  }

  return (
    <div className={cn("flex items-center space-x-2", className)}>
      <DropdownMenu>
        <DropdownMenuTrigger asChild>
          <Button
            variant="ghost"
            size="sm"
            className="-ml-3 h-8 data-[state=open]:bg-accent"
          >
            <span>{title}</span>
            {column.getIsSorted() === "desc" ? (
              <ArrowDown />
            ) : column.getIsSorted() === "asc" ? (
              <ArrowUp />
            ) : (
              <ChevronsUpDown />
            )}
          </Button>
        </DropdownMenuTrigger>
        <DropdownMenuContent align="start">
          <DropdownMenuItem onClick={() => column.toggleSorting(false)}>
            <ArrowUp className="h-3.5 w-3.5 text-muted-foreground/70" />
            Asc
          </DropdownMenuItem>
          <DropdownMenuItem onClick={() => column.toggleSorting(true)}>
            <ArrowDown className="h-3.5 w-3.5 text-muted-foreground/70" />
            Desc
          </DropdownMenuItem>
          <DropdownMenuSeparator />
          <DropdownMenuItem onClick={() => column.toggleVisibility(false)}>
            <EyeOff className="h-3.5 w-3.5 text-muted-foreground/70" />
            Hide
          </DropdownMenuItem>
        </DropdownMenuContent>
      </DropdownMenu>
    </div>
  )
}

----------------------------------------------------------------------------------
This is project file of  DataTablePaginationProps component: xsoftware/components/DataTablePaginationProps.tsx
----------------------------------------------------------------------------------
import { Table } from "@tanstack/react-table";

import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import {
  Pagination,
  PaginationContent,
  PaginationEllipsis,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "./ui/pagination";

interface DataTablePaginationProps<TData> {
  table: Table<TData>;
}

export function CombinedPagination<TData>({
  table,
}: DataTablePaginationProps<TData>) {
  const totalPages = table.getPageCount();
  const currentPage = table.getState().pagination.pageIndex + 1;
  const maxVisiblePages = 10;

  const getPageNumbers = () => {
    if (totalPages <= maxVisiblePages) {
      return Array.from({ length: totalPages }, (_, i) => i + 1);
    }

    if (currentPage <= 5) {
      return [1, 2, 3, 4, 5, "...", totalPages];
    }

    if (currentPage >= totalPages - 4) {
      return [
        1,
        "...",
        totalPages - 4,
        totalPages - 3,
        totalPages - 2,
        totalPages - 1,
        totalPages,
      ];
    }

    return [
      1,
      "...",
      currentPage - 1,
      currentPage,
      currentPage + 1,
      "...",
      totalPages,
    ];
  };
  return (
    <div className="flex flex-row items-center justify-between px-2 w-full mt-4">
      <div className="flex items-center gap-2 ">
        <p className="text-sm font-medium">Sahifalar</p>
        <Select
          value={`${table.getState().pagination.pageSize}`}
          onValueChange={(value) => {
            table.setPageSize(Number(value));
          }}
        >
          <SelectTrigger className="h-8 w-[70px]">
            <SelectValue placeholder={table.getState().pagination.pageSize} />
          </SelectTrigger>
          <SelectContent side="top">
            {[1, 10, 20, 30, 40, 50].map((pageSize) => (
              <SelectItem key={pageSize} value={`${pageSize}`}>
                {pageSize}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      </div>
      {totalPages === 1 ? null : (
        <Pagination>
          <PaginationContent>
            <PaginationItem>
              <PaginationPrevious
                href="#"
                onClick={() => table.previousPage()}
                isActive={!table.getCanPreviousPage()}
              />
            </PaginationItem>

            {totalPages > 1 &&
              getPageNumbers().map((page, index) =>
                page === "..." ? (
                  <PaginationItem key={index}>
                    <PaginationEllipsis />
                  </PaginationItem>
                ) : (
                  <PaginationItem key={page}>
                    <PaginationLink
                      href="#"
                      isActive={page === currentPage}
                      onClick={() => table.setPageIndex(Number(page) - 1)}
                    >
                      {page}
                    </PaginationLink>
                  </PaginationItem>
                )
              )}

            <PaginationItem>
              <PaginationNext
                href="#"
                onClick={() => table.nextPage()}
                isActive={!table.getCanNextPage()}
              />
            </PaginationItem>
          </PaginationContent>
        </Pagination>
      )}
    </div>
  );
}

----------------------------------------------------------------------------------
This is project file of  DataTableViewOptions component: xsoftware/components/DataTableViewOptions.tsx
----------------------------------------------------------------------------------
"use client"

import { DropdownMenuTrigger } from "@radix-ui/react-dropdown-menu"
import { Table } from "@tanstack/react-table"
import { Settings2 } from "lucide-react"

import { Button } from "@/components/ui/button"
import {
  DropdownMenu,
  DropdownMenuCheckboxItem,
  DropdownMenuContent,
  DropdownMenuLabel,
  DropdownMenuSeparator,
} from "@/components/ui/dropdown-menu"

interface DataTableViewOptionsProps<TData> {
  table: Table<TData>
}

export function DataTableViewOptions<TData>({
  table,
}: DataTableViewOptionsProps<TData>) {
  return (
    <DropdownMenu>
      <DropdownMenuTrigger asChild>
        <Button
          variant="outline"
          size="sm"
          className="ml-auto hidden h-8 lg:flex"
        >
          <Settings2 />
          View
        </Button>
      </DropdownMenuTrigger>
      <DropdownMenuContent align="end" className="w-[150px]">
        <DropdownMenuLabel>Toggle columns</DropdownMenuLabel>
        <DropdownMenuSeparator />
        {table
          .getAllColumns()
          .filter(
            (column) =>
              typeof column.accessorFn !== "undefined" && column.getCanHide()
          )
          .map((column) => {
            return (
              <DropdownMenuCheckboxItem
                key={column.id}
                className="capitalize"
                checked={column.getIsVisible()}
                onCheckedChange={(value) => column.toggleVisibility(!!value)}
              >
                {column.id}
              </DropdownMenuCheckboxItem>
            )
          })}
      </DropdownMenuContent>
    </DropdownMenu>
  )
}

----------------------------------------------------------------------------------
This is project file of  header component: xsoftware/components/header.tsx
----------------------------------------------------------------------------------
import React from "react";
import { SidebarTrigger } from "./ui/sidebar";
import { Separator } from "./ui/separator";
// import LanguageSelection from "./LanguageSelection";
import { Bell, CheckCheck, Trash2 } from "lucide-react";
import { Button } from "./ui/button";
import { Popover, PopoverContent, PopoverTrigger } from "./ui/popover";
import { Avatar, AvatarFallback, AvatarImage } from "./ui/avatar";
import { useTranslations } from "next-intl";

const Header = () => {
  const t = useTranslations("HomePage");
  return (
    <>
      <header className="sticky top-0 z-50  bg-white shadow-md w-full flex  h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-data-[collapsible=icon]/sidebar-wrapper:h-12">
        <div className="flex justify-between items-center gap-2 px-4 w-full">
          <div className="flex items-center ">
            <SidebarTrigger className="-ml-1" />
            <Separator
              orientation="vertical"
              className="mr-2 data-[orientation=vertical]:h-4 "
            />
            <h3 className="text-md font-semibold">{t("title")}</h3>
          </div>

          <div className="flex items-center gap-4">
            <Popover>
              <PopoverTrigger asChild>
                <Button className="cursor-pointer  relative rounded-full">
                  <span className="text-white font-semibold absolute -top-2 -right-2 text-xs border-2 border-red-600 rounded-full w-4 h-4 flex items-center justify-center bg-red-600">
                    3
                  </span>
                  <Bell />
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-85">
                <div className="grid gap-4">
                  <div className="grid gap-2">
                    <div className="flex justify-between items-center w-full">
                      <div className="flex items-center gap-3 w-2/3">
                        <Avatar>
                          <AvatarImage src="https://github.com/shadcn.png" />
                          <AvatarFallback>CN</AvatarFallback>
                        </Avatar>
                        <div className="flex flex-col">
                          <p className="text-sm font-semibold">
                            New Reservation for
                          </p>
                          <p className="text-xs text-muted-foreground">
                            Tesla Model S
                          </p>
                        </div>
                      </div>
                      <div className="flex gap-2 w-1/3">
                        <Button className="text-xs cursor-pointer">
                          <CheckCheck />
                        </Button>
                        <Button className="text-xs cursor-pointer bg-red-500">
                          <Trash2 />
                        </Button>
                      </div>
                    </div>
                    <div className="flex justify-between items-center w-full">
                      <div className="flex items-center gap-3 w-2/3">
                        <Avatar>
                          <AvatarImage src="https://github.com/shadcn.png" />
                          <AvatarFallback>CN</AvatarFallback>
                        </Avatar>
                        <div className="flex flex-col">
                          <p className="text-sm font-semibold">
                            New Reservation for
                          </p>
                          <p className="text-xs text-muted-foreground">
                            Tesla Model S
                          </p>
                        </div>
                      </div>
                      <div className="flex gap-2 w-1/3">
                        <Button className="text-xs cursor-pointer">
                          <CheckCheck />
                        </Button>
                        <Button className="text-xs cursor-pointer bg-red-500">
                          <Trash2 />
                        </Button>
                      </div>
                    </div>
                    <div className="flex justify-between items-center w-full">
                      <div className="flex items-center gap-3 w-2/3">
                        <Avatar>
                          <AvatarImage src="https://github.com/shadcn.png" />
                          <AvatarFallback>CN</AvatarFallback>
                        </Avatar>
                        <div className="flex flex-col">
                          <p className="text-sm font-semibold">
                            New Reservation for
                          </p>
                          <p className="text-xs text-muted-foreground">
                            Tesla Model S
                          </p>
                        </div>
                      </div>
                      <div className="flex gap-2 w-1/3">
                        <Button className="text-xs cursor-pointer">
                          <CheckCheck />
                        </Button>
                        <Button className="text-xs cursor-pointer bg-red-500">
                          <Trash2 />
                        </Button>
                      </div>
                    </div>
                  </div>
                </div>
              </PopoverContent>
            </Popover>

            {/* <LanguageSelection /> */}
          </div>
        </div>
      </header>
      <Separator
        orientation="horizontal"
        className="mr-2 data-[orientation=vertical]:h-4 mb-4"
      />
    </>
  );
};

export default Header;

----------------------------------------------------------------------------------
This is project file of  LanguageSelection component: xsoftware/components/LanguageSelection.tsx
----------------------------------------------------------------------------------
"use client";

import React, { useEffect, useState } from "react";
import Cookies from "js-cookie";
import { useRouter } from "next/navigation";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
} from "@/components/ui/select";
import { RuLangIcon, UzLangIcon } from "@/Icons/Icons";

const languages = [
  { code: "uz", label: "Uzbek", icon: <UzLangIcon /> },
  { code: "ru", label: "Russian", icon: <RuLangIcon /> },
];

const LanguageSelection = () => {
  const router = useRouter();
  const [selectedLang, setSelectedLang] = useState<
    (typeof languages)[number] | null
  >(null);

  // Ensure the selected language is set only on the client
  useEffect(() => {
    const savedLang = Cookies.get("locale") || "uz"; // Default to 'uz' if no cookie
    const foundLang =
      languages.find((lang) => lang.code === savedLang) || languages[0];
    setSelectedLang(foundLang);
  }, []);

  const handleLanguageChange = (value: string) => {
    const newLang = languages.find((lang) => lang.code === value)!;
    setSelectedLang(newLang);
    Cookies.set("locale", newLang.code);
    setTimeout(() => {
      router.refresh();
    }, 100);
  };

  if (!selectedLang) return null; // Prevent rendering until state is initialized

  return (
    <Select
      onValueChange={handleLanguageChange}
      defaultValue={selectedLang.code}
    >
      <SelectTrigger className="w-[100px] flex items-center gap-2">
        <span className="flex items-center gap-2">
          {selectedLang?.icon}
          {selectedLang?.code.toUpperCase()}
        </span>
      </SelectTrigger>
      <SelectContent>
        {languages.map((lang) => (
          <SelectItem
            key={lang.code}
            value={lang.code}
            className="flex items-center gap-2"
          >
            {lang.icon}
            {lang.label}
          </SelectItem>
        ))}
      </SelectContent>
    </Select>
  );
};

export default LanguageSelection;

----------------------------------------------------------------------------------
This is project file of  login-form component: xsoftware/components/login-form.tsx
----------------------------------------------------------------------------------
"use client";
import Cookies from "js-cookie";
import { useState } from "react";
import { useForm } from "react-hook-form";
import { useRouter } from "next/navigation";
import { cn } from "@/lib/utils";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Eye, EyeOff } from "lucide-react";
import { toast } from "sonner";

interface LoginFormInputs {
  phonenumber: string;
  password: string;
}

export function LoginForm({
  className,
  ...props
}: React.ComponentProps<"form">) {
  const [showPassword, setShowPassword] = useState(false);
  const { register, handleSubmit } = useForm<LoginFormInputs>();
  const router = useRouter();

  // Function to handle login
  const onSubmit = async (data: LoginFormInputs) => {
    try {
      const response = await fetch(
        "https://carmanagement-1-rmyc.onrender.com/api/v1/token/",
        {
          method: "POST",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({
            identifier: data.phonenumber,
            password: data.password,
          }),
        }
      );

      if (!response.ok) {
        throw new Error("Login failed. Please check your credentials.");
      }

      const result = await response.json();
      Cookies.set("token", result.access, { secure: true });
      router.push("/");

      toast.success("Login muvaffaqiyatli amalga oshirildi", {
        position: "top-right",
        closeButton: true,
        style: {
          backgroundColor: "green",
          color: "white",
        },
      });
    } catch (error) {
      toast.error("Login failed. Please try again.");
    }
  };

  return (
    <form
      onSubmit={handleSubmit(onSubmit)}
      className={cn("flex flex-col gap-6", className)}
      {...props}
    >
      <div className="flex flex-col items-center gap-2 text-center">
        <h1 className="text-2xl font-bold">Login to your account</h1>
        <p className="text-muted-foreground text-sm text-balance">
          Enter your phone number and password to access your account.
        </p>
      </div>
      <div className="grid gap-6">
        {/* Phone Number Field */}
        <div className="grid gap-3">
          <Label htmlFor="phonenumber">Telefon raqam</Label>
          <Input
            id="phonenumber"
            type="text"
            placeholder="+99890 123 45 67"
            {...register("phonenumber", { required: true })}
          />
        </div>

        {/* Password Field */}
        <div className="grid gap-3 relative">
          <div className="flex items-center">
            <Label htmlFor="password">Password</Label>
            <a
              href="#"
              className="ml-auto text-sm underline-offset-4 hover:underline"
            >
              Forgot your password?
            </a>
          </div>
          <div className="relative">
            <Input
              id="password"
              type={showPassword ? "text" : "password"}
              {...register("password", { required: true })}
            />
            <button
              type="button"
              onClick={() => setShowPassword(!showPassword)}
              className="absolute right-3 top-2 text-gray-500 hover:text-gray-700 cursor-pointer"
            >
              {showPassword ? <EyeOff size={20} /> : <Eye size={20} />}
            </button>
          </div>
        </div>

        {/* Submit Button */}
        <Button type="submit" className="w-full">
          Login
        </Button>
      </div>
    </form>
  );
}

----------------------------------------------------------------------------------
This is project file of  nav-main component: xsoftware/components/nav-main.tsx
----------------------------------------------------------------------------------
"use client";

import { ChevronRight, type LucideIcon } from "lucide-react";

import {
  Collapsible,
  CollapsibleContent,
  CollapsibleTrigger,
} from "@/components/ui/collapsible";
import {
  SidebarGroup,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  SidebarMenuSub,
  SidebarMenuSubButton,
  SidebarMenuSubItem,
} from "@/components/ui/sidebar";
import { usePathname } from "next/navigation";
import Link from "next/link";

export function NavMain({
  items,
}: {
  items: {
    title: string;
    url?: string;
    icon?: LucideIcon;
    isActive?: boolean;
    items?: {
      title: string;
      url: string;
    }[];
  }[];
}) {
  const pathname = usePathname();
  return (
    <SidebarGroup>
      <SidebarMenu className="cursor-pointer ">
        {items.map((item) => (
          <Collapsible
            key={item.title}
            asChild
            defaultOpen={item.isActive}
            className="group/collapsible "
          >
            <SidebarMenuItem>
              <CollapsibleTrigger asChild>
                <SidebarMenuButton tooltip={item.title}>
                  <Link
                    href={item.url ?? "#"}
                    className="flex items-center gap-2"
                  >
                    {item.icon && <item.icon />}
                    <span className="text-md font-semibold">{item.title}</span>
                  </Link>
                  {item.items && (
                    <ChevronRight className="ml-auto transition-transform duration-200 group-data-[state=open]/collapsible:rotate-90" />
                  )}
                </SidebarMenuButton>
              </CollapsibleTrigger>

              <CollapsibleContent>
                <SidebarMenuSub>
                  {item.items?.map((subItem) => (
                    <SidebarMenuSubItem key={subItem.title}>
                      <SidebarMenuSubButton
                        asChild
                        isActive={subItem.url === pathname}
                      >
                        <Link href={subItem.url}>
                          <span className={`text-md  font-semibold `}>
                            {subItem.title}
                          </span>
                        </Link>
                      </SidebarMenuSubButton>
                    </SidebarMenuSubItem>
                  ))}
                </SidebarMenuSub>
              </CollapsibleContent>
            </SidebarMenuItem>
          </Collapsible>
        ))}
      </SidebarMenu>
    </SidebarGroup>
  );
}

----------------------------------------------------------------------------------
This is project file of  nav-projects component: xsoftware/components/nav-projects.tsx
----------------------------------------------------------------------------------
"use client";

import { type LucideIcon } from "lucide-react";

import {
  SidebarGroup,
  SidebarGroupLabel,
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
} from "@/components/ui/sidebar";
import { usePathname } from "next/navigation";
import Link from "next/link";

export function NavProjects({
  projects,
}: {
  projects: {
    title: string;
    url: string;
    icon: LucideIcon;
  }[];
}) {
  const pathname = usePathname();
  return (
    <SidebarGroup>
      <SidebarGroupLabel>Pages</SidebarGroupLabel>

      <SidebarMenu>
        {projects.map((item) => (
          <SidebarMenuItem key={item.title}>
            <Link href={item.url}>
              <SidebarMenuButton
                tooltip={item.title}
                isActive={item.url === pathname}
                className=" flex items-center gap-2 cursor-pointer"
              >
                <span>{item.icon && <item.icon />}</span>
                <span className="text-md font-semibold">{item.title}</span>
              </SidebarMenuButton>
            </Link>
          </SidebarMenuItem>
        ))}
      </SidebarMenu>
    </SidebarGroup>
  );
}

----------------------------------------------------------------------------------
This is project file of  nav-user component: xsoftware/components/nav-user.tsx
----------------------------------------------------------------------------------
"use client";

import {
  BadgeCheck,
  Bell,
  ChevronsUpDown,
  CreditCard,
  LogOut,
} from "lucide-react";

import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar";
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuGroup,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar";
import { Button } from "./ui/button";
import Cookies from "js-cookie";

export function NavUser({
  user,
}: {
  user: {
    name: string;
    email: string;
    avatar: string;
  };
}) {
  const { isMobile } = useSidebar();

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <Avatar className="h-8 w-8 rounded-lg">
                <AvatarImage src={user.avatar} alt={user.name} />
                <AvatarFallback className="rounded-lg">CN</AvatarFallback>
              </Avatar>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-medium">{user.name}</span>
                <span className="truncate text-xs">{user.email}</span>
              </div>
              <ChevronsUpDown className="ml-auto size-4" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg"
            side={isMobile ? "bottom" : "right"}
            align="end"
            sideOffset={4}
          >
            <DropdownMenuLabel className="p-0 font-normal">
              <div className="flex items-center gap-2 px-1 py-1.5 text-left text-sm">
                <Avatar className="h-8 w-8 rounded-lg">
                  <AvatarImage src={user.avatar} alt={user.name} />
                  <AvatarFallback className="rounded-lg">CN</AvatarFallback>
                </Avatar>
                <div className="grid flex-1 text-left text-sm leading-tight">
                  <span className="truncate font-medium">{user.name}</span>
                  <span className="truncate text-xs">{user.email}</span>
                </div>
              </div>
            </DropdownMenuLabel>
            <DropdownMenuSeparator />
            {/* <DropdownMenuGroup>
              <DropdownMenuItem>
                <Sparkles />
                Upgrade to Pro
              </DropdownMenuItem>
            </DropdownMenuGroup> */}
            <DropdownMenuSeparator />
            <DropdownMenuGroup>
              <DropdownMenuItem>
                <BadgeCheck />
                Account
              </DropdownMenuItem>
              <DropdownMenuItem>
                <CreditCard />
                Billing
              </DropdownMenuItem>
              <DropdownMenuItem>
                <Bell />
                Notifications
              </DropdownMenuItem>
            </DropdownMenuGroup>
            <DropdownMenuSeparator />
            <DropdownMenuItem>
              <Button
                onClick={() => {
                  Cookies.remove("token", { path: "/" });
                  window.location.href = "/login";
                }}
                className="bg-transparent text-destructive hover:bg-transparent hover:text-destructive-foreground cursor-pointer"
              >
                <LogOut />
                Log out
              </Button>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  );
}

----------------------------------------------------------------------------------
This is project file of  ResponsiveModal component: xsoftware/components/ResponsiveModal.tsx
----------------------------------------------------------------------------------
import * as React from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogDescription,
} from "@/components/ui/dialog";
import {
  Drawer,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
  DrawerDescription,
  DrawerFooter,
} from "@/components/ui/drawer";
import { Button } from "@/components/ui/button";
import { useMediaQuery } from "@react-hook/media-query";
import { Loader2, Trash2 } from "lucide-react";

interface ResponsiveModalProps {
  open: boolean;
  setOpen: (value: boolean) => void;
  title: string;
  description: string;
  onConfirm: () => void;
  loading?: boolean;
}

export function ResponsiveModal({
  open,
  setOpen,
  title,
  description,
  onConfirm,
  loading,
}: ResponsiveModalProps) {
  const isDesktop = useMediaQuery("(min-width: 768px)");

  if (isDesktop) {
    return (
      <Dialog open={open} onOpenChange={setOpen}>
        <DialogContent className="sm:max-w-[425px]">
          <DialogHeader>
            <DialogTitle>{title}</DialogTitle>
            <DialogDescription>{description}</DialogDescription>
          </DialogHeader>
          <div className="flex justify-end gap-2 mt-4">
            <Button variant="outline" onClick={() => setOpen(false)}>
              Cancel
            </Button>
            <Button
              variant="outline"
              className="bg-red-600 text-white hover:bg-red-500 hover:text-white"
              onClick={onConfirm}
            >
              {loading ? (
                <Loader2 className="animate-spin h-4 w-4" />
              ) : (
                <span className="flex gap-2 items-center">
                  <Trash2 className="h-4 w-4" />
                  Delete
                </span>
              )}
            </Button>
          </div>
        </DialogContent>
      </Dialog>
    );
  }

  return (
    <Drawer open={open} onOpenChange={setOpen}>
      <DrawerContent>
        <DrawerHeader>
          <DrawerTitle>{title}</DrawerTitle>
          <DrawerDescription>{description}</DrawerDescription>
        </DrawerHeader>
        <DrawerFooter className="flex justify-end gap-2 p-4">
          <Button variant="outline" onClick={() => setOpen(false)}>
            Cancel
          </Button>
          <Button variant="outline" onClick={onConfirm}>
            Delete
          </Button>
        </DrawerFooter>
      </DrawerContent>
    </Drawer>
  );
}

----------------------------------------------------------------------------------
This is project file of  team-switcher component: xsoftware/components/team-switcher.tsx
----------------------------------------------------------------------------------
"use client"

import * as React from "react"
import { ChevronsUpDown, Plus } from "lucide-react"

import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu"
import {
  SidebarMenu,
  SidebarMenuButton,
  SidebarMenuItem,
  useSidebar,
} from "@/components/ui/sidebar"

export function TeamSwitcher({
  teams,
}: {
  teams: {
    name: string
    logo: React.ElementType
    plan: string
  }[]
}) {
  const { isMobile } = useSidebar()
  const [activeTeam, setActiveTeam] = React.useState(teams[0])

  return (
    <SidebarMenu>
      <SidebarMenuItem>
        <DropdownMenu>
          <DropdownMenuTrigger asChild>
            <SidebarMenuButton
              size="lg"
              className="data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground"
            >
              <div className="bg-sidebar-primary text-sidebar-primary-foreground flex aspect-square size-8 items-center justify-center rounded-lg">
                <activeTeam.logo className="size-4" />
              </div>
              <div className="grid flex-1 text-left text-sm leading-tight">
                <span className="truncate font-medium">{activeTeam.name}</span>
                <span className="truncate text-xs">{activeTeam.plan}</span>
              </div>
              <ChevronsUpDown className="ml-auto" />
            </SidebarMenuButton>
          </DropdownMenuTrigger>
          <DropdownMenuContent
            className="w-(--radix-dropdown-menu-trigger-width) min-w-56 rounded-lg"
            align="start"
            side={isMobile ? "bottom" : "right"}
            sideOffset={4}
          >
            <DropdownMenuLabel className="text-muted-foreground text-xs">
              Teams
            </DropdownMenuLabel>
            {teams.map((team, index) => (
              <DropdownMenuItem
                key={team.name}
                onClick={() => setActiveTeam(team)}
                className="gap-2 p-2"
              >
                <div className="flex size-6 items-center justify-center rounded-xs border">
                  <team.logo className="size-4 shrink-0" />
                </div>
                {team.name}
                <DropdownMenuShortcut>⌘{index + 1}</DropdownMenuShortcut>
              </DropdownMenuItem>
            ))}
            <DropdownMenuSeparator />
            <DropdownMenuItem className="gap-2 p-2">
              <div className="bg-background flex size-6 items-center justify-center rounded-md border">
                <Plus className="size-4" />
              </div>
              <div className="text-muted-foreground font-medium">Add team</div>
            </DropdownMenuItem>
          </DropdownMenuContent>
        </DropdownMenu>
      </SidebarMenuItem>
    </SidebarMenu>
  )
}

----------------------------------------------------------------------------------
This is project file of hooks: xsoftware/hooks/use-mobile.ts
----------------------------------------------------------------------------------
import * as React from "react"

const MOBILE_BREAKPOINT = 768

export function useIsMobile() {
  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)

  React.useEffect(() => {
    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)
    const onChange = () => {
      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    }
    mql.addEventListener("change", onChange)
    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)
    return () => mql.removeEventListener("change", onChange)
  }, [])

  return !!isMobile
}

----------------------------------------------------------------------------------
This is project file of i18n: xsoftware/i18n/use-request.ts
----------------------------------------------------------------------------------
import { getRequestConfig } from "next-intl/server";
import { cookies } from "next/headers";

export default getRequestConfig(async () => {
  const cookieStore = (await cookies()).get("locale");
  const locale = cookieStore ? cookieStore.value : "uz";

  return {
    locale,
    messages: (await import(`@/messages/${locale}.json`)).default,
  };
});


----------------------------------------------------------------------------------
This is project file of FeaturesIcon: xsoftware/Icons/FeaturesIcon.tsx
----------------------------------------------------------------------------------
import type { ComponentProps, FC } from "react";

export const FeaturesIcon = (iconName: string) => {
  const icons: Record<string, FC<ComponentProps<"svg">>> = {
    AndroidAuto,
    HeatedSeats,
    Bluetooth,
    AppleCarPlay,
    USBCharger,
    USB,
    AUXInput,
    BackupCamera,
    Panorama,
    GPS,
    Sensors,
  };

  return icons[iconName] || null;
};

export const HeatedSeats: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        d="M4.757 21.614h12.162a.624.624 0 0 0 .604-.466l4.42-16.782a1.89 1.89 0 0 0-1.34-2.304 1.88 1.88 0 0 0-1.43.194c-.435.253-.745.66-.874 1.146l-3.081 11.621H14.11a.625.625 0 0 0-.001 1.25l1.586.001h.002c.284 0 .532-.19.604-.465l3.206-12.088a.63.63 0 0 1 .294-.385.636.636 0 0 1 .932.712l-4.298 16.316H5.181L3.547 16.26l1.587.001a.625.625 0 1 0 .001-1.25l-2.51-.002a.626.626 0 0 0-.58.856l2.132 5.356a.625.625 0 0 0 .58.394"
      ></path>
      <path
        fill="#121214"
        d="M5.95 18.204a.623.623 0 0 0 .882.071c1.2-1.021 1.678-3.176.204-5.159-1.092-1.468-.759-2.934-.173-3.505a.625.625 0 0 0-.873-.895c-1.063 1.037-1.409 3.193.043 5.146 1.02 1.373.756 2.808-.012 3.461a.626.626 0 0 0-.07.881"
      ></path>
      <path
        fill="#121214"
        d="M8.7 18.424a.626.626 0 0 1-.406-1.101c.769-.653 1.033-2.088.013-3.461-1.452-1.953-1.106-4.109-.043-5.146a.625.625 0 0 1 .873.895c-.586.571-.92 2.037.173 3.505 1.474 1.983.995 4.138-.204 5.159a.63.63 0 0 1-.405.149"
      ></path>
      <path
        fill="#121214"
        d="M10.497 18.204a.623.623 0 0 0 .882.071c1.2-1.021 1.678-3.176.203-5.159-1.09-1.468-.758-2.934-.172-3.505a.625.625 0 0 0-.873-.895c-1.063 1.037-1.409 3.193.042 5.146 1.021 1.373.757 2.808-.01 3.461a.626.626 0 0 0-.072.881"
      ></path>
    </svg>
  );
};

export const USBCharger: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        d="M10.4 6.3c-.3 0-.6-.3-.6-.6V4c0-.3.3-.6.6-.6s.6.3.6.6v1.7c0 .3-.3.6-.6.6M13.1 5.7c0 .3.3.6.6.6.4 0 .7-.3.6-.6V4c0-.3-.3-.6-.6-.6s-.6.3-.6.6z"
      ></path>
      <path
        fill="#121214"
        fillRule="evenodd"
        d="M6.7 8.9h10.7v7.9c0 1.6-1.3 2.8-2.8 2.8h-2.5c-.3 0-.6.3-.6.6v2.4c0 .3.3.6.6.6s.6-.3.6-.6v-1.8h1.9c2.2 0 4-1.8 4-4V8.3c0-.3-.3-.6-.6-.6h-.9V1.4c0-.3-.3-.6-.6-.6H7.6c-.4 0-.6.3-.6.6v6.3h-.9c-.3 0-.6.3-.6.6v8.5c0 1.5.9 2.9 2.3 3.6.056.056.144.08.245.11.08.021.167.046.255.09.3.1.7-.1.8-.4s-.1-.7-.4-.8c-.2 0-.3 0-.4-.1-1-.5-1.6-1.4-1.6-2.5zm1.5-1.3h7.7V2H8.2z"
        clipRule="evenodd"
      ></path>
      <path fill="#121214" d="M12.8 13.7h1.6l-3.1 4.5v-3.4H9.7l3.1-4.6z"></path>
    </svg>
  );
};

export const USB: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        d="M9.868 5.767a.625.625 0 0 0 1.25 0V4.046a.626.626 0 0 0-1.25 0zM13.493 6.392a.625.625 0 0 1-.625-.625V4.046a.626.626 0 0 1 1.25 0v1.72c0 .346-.28.626-.625.626"
      ></path>
      <path
        fill="#121214"
        fillRule="evenodd"
        d="M7.358 7.563V1.625c0-.344.28-.625.625-.625h8.02c.345 0 .625.281.625.625v5.938h.683c.346 0 .625.28.625.625v7.198a3.66 3.66 0 0 1-3.658 3.658h-1.66v3.302a.625.625 0 0 1-1.25 0v-3.927c0-.344.28-.625.625-.625h2.285a2.41 2.41 0 0 0 2.408-2.408V8.813H7.3v6.573a2.42 2.42 0 0 0 1.699 2.302.625.625 0 0 1-.369 1.195 3.676 3.676 0 0 1-2.58-3.497V8.188c0-.345.28-.625.625-.625zm8.02-5.312v5.312h-6.77V2.251z"
        clipRule="evenodd"
      ></path>
    </svg>
  );
};

export const Bluetooth: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        d="M6.25 17.869a.626.626 0 0 0 .882.002l4.992-4.963 4.545 4.522-3.905 3.894v-5.94a.625.625 0 0 0-1.25 0v6.439c0 .422.253.8.644.962q.197.082.4.081c.27 0 .536-.105.736-.305l4.258-4.246c.238-.237.369-.552.369-.887s-.131-.65-.37-.888l-4.54-4.514 4.568-4.542c.237-.236.37-.551.37-.886s-.13-.65-.368-.888l-4.288-4.275a1.04 1.04 0 0 0-1.136-.223c-.39.162-.643.54-.643.962V8.65a.626.626 0 0 0 1.25 0V2.674l3.934 3.923-4.573 4.548-5.02-4.991a.625.625 0 1 0-.881.886l5.014 4.987-4.986 4.958a.623.623 0 0 0-.003.884"
      ></path>
    </svg>
  );
};

export const AndroidAuto: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        d="M8.05 16.88c0 .34.28.62.62.62s.62-.28.64-.62V7.76l7.28 4.2-5.57 3.22a.621.621 0 1 0 .62 1.08l5.71-3.3c.36-.21.58-.58.58-1s-.22-.79-.58-1L9.79 6.59c-.36-.21-.8-.21-1.16 0s-.58.58-.58 1z"
      ></path>
      <path
        fill="#121214"
        fillRule="evenodd"
        d="M1 11.97c0 6.04 4.92 10.96 10.97 10.96 6.04 0 10.97-4.91 10.97-10.96S18.02 1 11.97 1 1 5.93 1 11.97m1.25 0c0-5.36 4.36-9.72 9.72-9.72 5.35 0 9.72 4.36 9.72 9.72s-4.36 9.72-9.72 9.72-9.72-4.36-9.72-9.72"
        clipRule="evenodd"
      ></path>
    </svg>
  );
};

export const AppleCarPlay: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        d="M8.05 16.88c0 .34.28.62.62.62s.62-.28.64-.62V7.76l7.28 4.2-5.57 3.22a.621.621 0 1 0 .62 1.08l5.71-3.3c.36-.21.58-.58.58-1s-.22-.79-.58-1L9.79 6.59c-.36-.21-.8-.21-1.16 0s-.58.58-.58 1z"
      ></path>
      <path
        fill="#121214"
        fillRule="evenodd"
        d="M1 11.97c0 6.04 4.92 10.96 10.97 10.96 6.04 0 10.97-4.91 10.97-10.96S18.02 1 11.97 1 1 5.93 1 11.97m1.25 0c0-5.36 4.36-9.72 9.72-9.72 5.35 0 9.72 4.36 9.72 9.72s-4.36 9.72-9.72 9.72-9.72-4.36-9.72-9.72"
        clipRule="evenodd"
      ></path>
    </svg>
  );
};
export const AUXInput: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        fillRule="evenodd"
        d="M5.65 13.125v-10.1c0-.2.1-.3.2-.4l1.1-1.1c.5-.5 1.2-.5 1.7 0l1.1 1.1c.1.1.2.3.2.4v10.1h.5c.3 0 .6.3.6.6v1.6c0 1.04-.507 1.91-1.3 2.393v1.307c0 .7-.6 1.4-1.4 1.4v1.7c0 .4-.2.7-.6.7-.3 0-.6-.3-.6-.6v-1.8c-.8 0-1.4-.6-1.4-1.4V17.75a2.78 2.78 0 0 1-1.4-2.425v-1.6c0-.3.3-.6.6-.6zm2.9 0v-3.2h-1.7v3.2zm0-6.6v2.2h-1.7v-2.2zm0-1.2v-2.1l-.9-.9-.8.9v2.1zm-.3 12.8h-1.1q-.1 0-.2-.007v.907c0 .1.1.2.2.2h1.2c.1 0 .2-.1.2-.2v-.914q-.147.014-.3.014m-2.7-3.7v.9c0 .9.7 1.6 1.6 1.6h1.1c.9 0 1.6-.7 1.6-1.6v-.9z"
        clipRule="evenodd"
      ></path>
      <path
        fill="#121214"
        d="M17.75 8.418v.007a1.8 1.8 0 1 1-1.3-1.73v-2.97c0-.4.2-.7.5-.9s.7-.2 1 0l1.4.9c.3.2.4.6.2.9s-.6.4-.9.2l-.9-.6z"
      ></path>
    </svg>
  );
};
export const Panorama: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        d="M11.941 5.65a.625.625 0 0 1-.625-.625v-2.5a.625.625 0 0 1 1.25 0v2.5c0 .345-.28.625-.625.625"
      ></path>
      <path
        fill="#121214"
        fillRule="evenodd"
        d="M11.965 16.59a4.63 4.63 0 0 1-4.626-4.626 4.63 4.63 0 0 1 4.625-4.625 4.63 4.63 0 0 1 4.626 4.625 4.63 4.63 0 0 1-4.626 4.625m0-8a3.38 3.38 0 0 0-3.376 3.374 3.38 3.38 0 0 0 3.375 3.375 3.38 3.38 0 0 0 3.375-3.375 3.38 3.38 0 0 0-3.375-3.375"
        clipRule="evenodd"
      ></path>
      <path
        fill="#121214"
        d="M6.6 7.516a.623.623 0 0 0 .884 0 .625.625 0 0 0 0-.884L5.717 4.864a.626.626 0 0 0-.885.885zM5.025 12.613h-2.5a.625.625 0 0 1 0-1.25h2.5a.625.625 0 0 1 0 1.25M4.864 19.097a.623.623 0 0 0 .884 0l1.768-1.767a.626.626 0 0 0-.885-.885l-1.767 1.768a.625.625 0 0 0 0 .884M11.988 22.029a.625.625 0 0 1-.625-.625v-2.5a.625.625 0 0 1 1.25 0v2.5c0 .345-.28.625-.625.625M18.213 19.065a.623.623 0 0 0 .884 0 .625.625 0 0 0 0-.884l-1.767-1.768a.626.626 0 0 0-.885.885zM21.404 12.566h-2.5a.625.625 0 0 1 0-1.25h2.5a.625.625 0 0 1 0 1.25M16.413 7.484a.623.623 0 0 0 .884 0l1.768-1.767a.626.626 0 0 0-.885-.885L16.413 6.6a.625.625 0 0 0 0 .884"
      ></path>
    </svg>
  );
};
export const BackupCamera: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        fillRule="evenodd"
        d="M14.45 7.5h-4.8c-.4 0-.6-.3-.6-.7V4.5c0-.3.3-.6.6-.6h4.8c.3 0 .6.3.6.6v2.3c0 .4-.3.7-.6.7m-4.2-1.3h3.5v-1h-3.5z"
        clipRule="evenodd"
      ></path>
      <path
        fill="#121214"
        d="M9.65 13h4.8c.3 0 .6-.3.6-.6s-.3-.6-.6-.6h-4.8c-.3 0-.6.3-.6.6s.3.6.6.6"
      ></path>
      <path
        fill="#121214"
        fillRule="evenodd"
        d="M9.35 15.1h5.3c1.3 0 2.3-1 2.3-2.3V6.9h.7c.4 0 .6-.3.6-.6s-.3-.6-.6-.6h-.7V3.8c0-1.3-1-2.3-2.3-2.3h-5.3c-1.3 0-2.3 1-2.3 2.3v1.8h-.7c-.3 0-.6.2-.6.6s.3.7.6.7h.7v5.9c0 1.3 1 2.3 2.3 2.3m-1-11.3c0-.6.4-1.1 1-1.1h5.4c.6 0 1.1.5 1.1 1.1v9c0 .6-.5 1.1-1.1 1.1h-5.3c-.6 0-1.1-.5-1.1-1.1z"
        clipRule="evenodd"
      ></path>
      <path
        fill="#121214"
        d="M11.85 19.1c-1 0-2-.4-2.8-1.1-.2-.2-.2-.6 0-.9.2-.2.6-.2.9 0 1.1 1.1 2.8 1 3.8 0 .2-.2.6-.2.9 0 .2.2.2.6 0 .9-.7.7-1.8 1.1-2.8 1.1M11.95 22.4c-1.8 0-3.6-.7-5-2.1-.2-.2-.2-.6 0-.9.2-.2.6-.2.9 0 2.3 2.3 6.1 2.3 8.4-.1.2-.2.6-.2.9 0 .2.2.2.6 0 .9-1.5 1.5-3.3 2.2-5.2 2.2"
      ></path>
    </svg>
  );
};

export const Sensors: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        fillRule="evenodd"
        d="M6.3 5.025c0-.345.28-.625.625-.625h4.8c.345 0 .625.28.625.625v2.3c0 .345-.28.625-.625.625h-4.8a.625.625 0 0 1-.625-.625zm1.25.625V6.7h3.55V5.65z"
        clipRule="evenodd"
      ></path>
      <path
        fill="#121214"
        d="M6.925 12.3a.625.625 0 1 0 0 1.25h4.8a.625.625 0 1 0 0-1.25z"
      ></path>
      <path
        fill="#121214"
        fillRule="evenodd"
        d="M6.625 2C5.38 2 4.3 3.08 4.3 4.325V6.1h-.675a.625.625 0 1 0 0 1.25H4.3v5.975c0 1.245 1.08 2.325 2.325 2.325h5.3c1.369 0 2.325-1.104 2.325-2.325V7.35h.675a.625.625 0 1 0 0-1.25h-.675V4.325C14.25 3.08 13.17 2 11.925 2zM5.55 4.325c0-.555.52-1.075 1.075-1.075h5.3c.555 0 1.075.52 1.075 1.075v9a1.06 1.06 0 0 1-1.075 1.075h-5.3c-.555 0-1.075-.52-1.075-1.075z"
        clipRule="evenodd"
      ></path>
      <path
        fill="#121214"
        d="M16.725 14.1c.345 0 .625.28.625.625 0 2.152-1.78 3.907-3.89 4.024a.625.625 0 1 1-.07-1.248c1.49-.083 2.71-1.328 2.71-2.776 0-.345.28-.625.625-.625"
      ></path>
      <path
        fill="#121214"
        d="M20.025 14.1c.345 0 .625.28.625.625 0 3.948-3.18 7.116-7.108 7.225a.625.625 0 0 1-.034-1.25c3.271-.09 5.892-2.723 5.892-5.975 0-.345.28-.625.625-.625"
      ></path>
    </svg>
  );
};

export const GPS: FC<ComponentProps<"svg">> = () => {
  return (
    <svg
      xmlns="https://www.w3.org/2000/svg"
      width="30px"
      height="30px"
      fill="none"
      viewBox="0 0 24 24"
      role="img"
      version="1.1"
    >
      <path
        fill="#121214"
        d="M15.662 11.39a.623.623 0 0 0 .884-.002l4.521-4.52c.29-.288.448-.673.448-1.08s-.159-.792-.447-1.08l-3.299-3.3c-.545-.544-1.496-.543-2.04 0l-4.564 4.564a.626.626 0 0 0 .884.884l4.565-4.564c.093-.092.177-.093.271 0l3.3 3.3a.275.275 0 0 1 0 .391l-4.523 4.524a.624.624 0 0 0 0 .883"
      ></path>
      <path
        fill="#121214"
        d="M4.739 21.104a1.483 1.483 0 0 0 2.092 0l4.63-4.63a.624.624 0 1 0-.884-.884l-4.63 4.63a.23.23 0 0 1-.325 0l-3.305-3.306a.23.23 0 0 1 0-.325l4.198-4.199a.78.78 0 0 1 .558-.23c.21 0 .41.081.559.23l1.22 1.223c1.367 1.372 3.556 1.432 4.88.133a3.4 3.4 0 0 0 1.009-2.664 3.41 3.41 0 0 0-1.39-2.502 3.41 3.41 0 0 0-3.916-.05c-.45.315-.808.714-1.063 1.187a.624.624 0 1 0 1.1.593q.245-.45.678-.754c.718-.5 1.754-.488 2.46.032.525.385.838.947.883 1.584a2.14 2.14 0 0 1-.636 1.681c-.822.808-2.25.751-3.12-.123l-1.22-1.222a2.02 2.02 0 0 0-1.442-.599h-.002c-.545 0-1.057.212-1.442.597l-4.2 4.2a1.484 1.484 0 0 0 .002 2.093zM12.179 19.134a.625.625 0 0 1 0-1.25 5.71 5.71 0 0 0 5.703-5.702.625.625 0 1 1 1.25 0c0 3.833-3.12 6.952-6.953 6.952"
      ></path>
      <path
        fill="#121214"
        d="M11.554 21.61c0 .346.28.626.625.626 5.543 0 10.054-4.51 10.054-10.054a.626.626 0 0 0-1.25 0c0 4.855-3.95 8.804-8.804 8.804a.625.625 0 0 0-.625.625"
      ></path>
    </svg>
  );
};

----------------------------------------------------------------------------------
This is project file of Icons: xsoftware/Icons/Icons.tsx
----------------------------------------------------------------------------------
import type { ComponentProps, FC } from "react";

export const GasolineIcon: FC<ComponentProps<"svg">> = (props) => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path d="M22.34 9.33L20.34 8.33C19.97 8.15 19.51 8.29 19.33 8.66C19.14 9.04 19.29 9.49 19.66 9.67L21.25 10.46V15.25L17.5 15.26V5C17.5 3 16.16 2 14.5 2H6.5C4.84 2 3.5 3 3.5 5V21.25H2C1.59 21.25 1.25 21.59 1.25 22C1.25 22.41 1.59 22.75 2 22.75H19C19.41 22.75 19.75 22.41 19.75 22C19.75 21.59 19.41 21.25 19 21.25H17.5V16.76L22 16.75C22.42 16.75 22.75 16.41 22.75 16V10C22.75 9.72 22.59 9.46 22.34 9.33ZM6 6.89C6 5.5 6.85 5 7.89 5H13.12C14.15 5 15 5.5 15 6.89V8.12C15 9.5 14.15 10 13.11 10H7.89C6.85 10 6 9.5 6 8.11V6.89ZM6.5 12.25H9.5C9.91 12.25 10.25 12.59 10.25 13C10.25 13.41 9.91 13.75 9.5 13.75H6.5C6.09 13.75 5.75 13.41 5.75 13C5.75 12.59 6.09 12.25 6.5 12.25Z" />
    </svg>
  );
};

export const UzLangIcon: FC<ComponentProps<"svg">> = (props) => {
  return (
    <svg
      width="27"
      height="20"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7325)">
        <path
          d="M12.088 178.088C4.246 202.656 -0.000999823 228.829 1.76555e-07 255.998C-0.000999823 283.168 4.247 309.343 12.089 333.911L256 345.043L499.911 333.913C507.752 309.344 512.001 283.168 512.001 256C512 228.83 507.753 202.656 499.911 178.087L256 166.957L12.088 178.088Z"
          fill="#F0F0F0"
        />
        <path
          d="M499.91 178.088L255.999 166.958L12.087 178.088C9.76296 185.372 7.76196 192.799 6.08496 200.349H505.909C504.234 192.798 502.234 185.37 499.91 178.088Z"
          fill="#D80027"
        />
        <path
          d="M6.08789 311.651C7.76289 319.201 9.76389 326.627 12.0879 333.911L12.1119 333.912L255.998 345.042L499.909 333.912C502.233 326.628 504.234 319.201 505.91 311.651H6.08789Z"
          fill="#D80027"
        />
        <path
          d="M255.999 511.999C370.215 511.999 466.945 437.196 499.91 333.912H12.0889C45.0539 437.195 141.786 511.999 255.999 511.999Z"
          fill="#6DA544"
        />
        <path
          d="M255.999 0.000976573C141.785 0.00197657 45.0549 74.805 12.0879 178.088L499.909 178.089C466.946 74.804 370.215 -2.34275e-05 255.999 0.000976573Z"
          fill="#338AF3"
        />
        <path
          d="M116.986 105.74C116.986 81.7628 133.837 61.7328 156.34 56.8188C152.882 56.0628 149.293 55.6538 145.607 55.6538C117.945 55.6538 95.52 78.0778 95.52 105.741C95.52 133.404 117.943 155.828 145.607 155.828C149.293 155.828 152.881 155.418 156.34 154.663C133.838 149.747 116.986 129.717 116.986 105.74Z"
          fill="#F0F0F0"
        />
        <path
          d="M185.944 128.507L189.334 138.942H200.306L191.43 145.392L194.82 155.827L185.944 149.378L177.066 155.827L180.457 145.392L171.58 138.942H182.552L185.944 128.507Z"
          fill="#F0F0F0"
        />
        <path
          d="M220.964 128.507L224.355 138.942H235.327L226.45 145.392L229.841 155.827L220.964 149.378L212.087 155.827L215.478 145.392L206.602 138.942H217.573L220.964 128.507Z"
          fill="#F0F0F0"
        />
        <path
          d="M255.985 128.507L259.375 138.942H270.348L261.471 145.392L264.861 155.827L255.985 149.378L247.107 155.827L250.499 145.392L241.621 138.942H252.594L255.985 128.507Z"
          fill="#F0F0F0"
        />
        <path
          d="M291.006 128.507L294.397 138.942H305.368L296.492 145.392L299.883 155.827L291.006 149.378L282.128 155.827L285.52 145.392L276.642 138.942H287.614L291.006 128.507Z"
          fill="#F0F0F0"
        />
        <path
          d="M326.026 128.507L329.417 138.942H340.389L331.513 145.392L334.904 155.827L326.026 149.378L317.149 155.827L320.54 145.392L311.664 138.942H322.635L326.026 128.507Z"
          fill="#F0F0F0"
        />
        <path
          d="M220.964 92.0801L224.355 102.514H235.327L226.45 108.965L229.841 119.399L220.964 112.95L212.087 119.399L215.478 108.965L206.602 102.514H217.573L220.964 92.0801Z"
          fill="#F0F0F0"
        />
        <path
          d="M255.985 92.0801L259.375 102.514H270.348L261.471 108.965L264.861 119.399L255.985 112.95L247.107 119.399L250.499 108.965L241.621 102.514H252.594L255.985 92.0801Z"
          fill="#F0F0F0"
        />
        <path
          d="M291.006 92.0801L294.397 102.514H305.368L296.492 108.965L299.883 119.399L291.006 112.95L282.128 119.399L285.52 108.965L276.642 102.514H287.614L291.006 92.0801Z"
          fill="#F0F0F0"
        />
        <path
          d="M326.026 92.0801L329.417 102.514H340.389L331.513 108.965L334.904 119.399L326.026 112.95L317.149 119.399L320.54 108.965L311.664 102.514H322.635L326.026 92.0801Z"
          fill="#F0F0F0"
        />
        <path
          d="M255.985 55.6519L259.375 66.0879H270.348L261.471 72.5369L264.861 82.9729L255.985 76.5239L247.107 82.9729L250.499 72.5369L241.621 66.0879H252.594L255.985 55.6519Z"
          fill="#F0F0F0"
        />
        <path
          d="M291.006 55.6519L294.397 66.0879H305.368L296.492 72.5369L299.883 82.9729L291.006 76.5239L282.128 82.9729L285.52 72.5369L276.642 66.0879H287.614L291.006 55.6519Z"
          fill="#F0F0F0"
        />
        <path
          d="M326.026 55.6519L329.417 66.0879H340.389L331.513 72.5369L334.904 82.9729L326.026 76.5239L317.149 82.9729L320.54 72.5369L311.664 66.0879H322.635L326.026 55.6519Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7325">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export const RuLangIcon: FC<ComponentProps<"svg">> = (props) => {
  return (
    <svg
      width="27"
      height="20"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7266)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M496.077 345.043C506.368 317.31 512 287.314 512 256C512 224.686 506.368 194.69 496.077 166.957H15.923C5.633 194.69 0 224.686 0 256C0 287.314 5.633 317.31 15.923 345.043L256 367.304L496.077 345.043Z"
          fill="#0052B4"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.9231C52.0941 442.528 145.929 512 256 512Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7266">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

----------------------------------------------------------------------------------
This is project file of index: xsoftware/Icons/index.ts
----------------------------------------------------------------------------------
export * from "./Icons";

----------------------------------------------------------------------------------
This is project file of utils: xsoftware/lib/utils.ts
----------------------------------------------------------------------------------
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}


----------------------------------------------------------------------------------
This is project file of providers: xsoftware/providers/UserProvider.tsx
----------------------------------------------------------------------------------

"use client";

import { createContext, useContext } from "react";

enum UserRole {
  ADMIN = "admin",
  USER = "user",
  OWNER = "owner",
}

export interface UserInterface {
  name: string;
  user_role: {
    id: number;
    name: UserRole;
  };
}

export const UserContext = createContext<UserInterface | null>(null);

export function useUser() {
  const user = useContext(UserContext);

  if (user?.user_role.name === UserRole.ADMIN)
    return {
      user,
      settings: {
        dashboard: ["read", "create", "update", "delete"],
        schedule: ["read", "create", "update", "delete"],
        staffs: ["read", "create", "update", "delete"],
      },
    };

  if (user?.user_role.name === UserRole.OWNER)
    return {
      user,
      settings: {
        dashboard: ["read", "create", "update", "delete"],
      },
    };

  if (user?.user_role.name === UserRole.USER)
    return {
      user,
      settings: {
        dashboard: ["read", "create", "update", "delete"],
      },
    };
}

export function UserProvider({
  value,
  children,
}: {
  value: UserInterface | null;
  children: React.ReactNode;
}) {
  return <UserContext.Provider value={value}>{children}</UserContext.Provider>;
}


----------------------------------------------------------------------------------
This is project file of interfaces: xsoftware/interfaces.ts
----------------------------------------------------------------------------------
import { Path } from "react-hook-form";
import { TypeOf, ZodType } from "zod";

export interface InputInterface<T extends ZodType> {
  name: Path<TypeOf<T>>;
  label: string;
  type: string;
  inputType?: string;
  placeholder?: string;
  options?: {
    value: string;
    label: string;
    color?: string;
    icon?: string;
  }[];
}

export interface InputGroup<T extends ZodType> {
  title?: string;
  fields: InputInterface<T>[];
}

// 🔹 Umumiy inputlar turi (yagona input yoki bo'lim)
export type FormInput<T extends ZodType> = InputInterface<T> | InputGroup<T>;

----------------------------------------------------------------------------------
This is project file of middleware: xsoftware/middleware.ts
----------------------------------------------------------------------------------
import { NextResponse } from "next/server";
import type { NextRequest } from "next/server";

export function middleware(request: NextRequest) {
  const token = request.cookies.get("token")?.value;

  if (!token) {
    return NextResponse.redirect(new URL("/login", request.url));
  }

  return NextResponse.next();
}

// Apply middleware only to protected routes
export const config = {
  matcher: [
    "/",
    "/profile/:path*",
    "/settings/:path*",
    "/reports/:path*",
    "/clients/:path*",
    "/cars/:path*",
    "/reservations/:path*",
    "/users/:path*",
    "/schedule/:path*",
    "/cars/create-car/:path*",
    "/clients/create-client/:path*",
    "/reservations/create-reservation/:path*",
    "/users/create-user/:path*",
    "/schedule/create-schedule/:path*",
    "/branch/create-branch/:path*",
  ],
};


----------------------------------------------------------------------------------
This is project file of next.config.ts: xsoftware/next.config.ts
----------------------------------------------------------------------------------
import { NextConfig } from "next";
import createNextIntlPlugin from "next-intl/plugin";

const withPWA = require("next-pwa")({
  dest: "public",
  register: true,
  skipWaiting: true,
  disable: process.env.NODE_ENV === "development",
});

const nextConfig: NextConfig = {
  images: {
    domains: [
      "images.unsplash.com",
      "orientrentcar.uz",
      "create.vista.com",
      "randomuser.me",
      "carmanagement-1-rmyc.onrender.com",
    ],
  },
};

const withNextIntl = createNextIntlPlugin();
export default withPWA(withNextIntl(nextConfig));
